// @strict-types

#Область ПрограммныйИнтерфейс

// Подставляет в последний пакет набора данных запроса конструкцию ВЫБРАТЬ ПЕРВЫЕ N
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
// 
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных - Набор данных СКД
//  КоличествоПолучаемыхЗаписей  - Число, Неопределено - Количество получаемых записей. 
//		Соответствует ключевому слову ПЕРВЫЕ языка запросов.
//		Если Неопределено, ограничение на количество выбираемых записей отсутствует.
//
Процедура УстановитьКоличествоПолучаемыхЗаписейНабораДанных(НаборДанных, КоличествоПолучаемыхЗаписей) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.РежимКомпоновкиДанных = Истина;
	СхемаЗапроса.УстановитьТекстЗапроса(НаборДанных.Запрос);
	ПоследнийПакет = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	ПоследнийПакет.Операторы.Получить(0).КоличествоПолучаемыхЗаписей = КоличествоПолучаемыхЗаписей;
	
	НаборДанных.Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();
		
КонецПроцедуры

// Создает новый компоновщик настроек на основе СКД и настроек
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
// 
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных
//  Настройки - Неопределено, НастройкиКомпоновкиДанных - Загружаемые настройки
// 
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных
Функция НовыйКомпоновщикНастроек(СхемаКомпоновкиДанных, Настройки = Неопределено) Экспорт
	
	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(?(Настройки = Неопределено, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, Настройки));
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

// Поле компоновки данных.
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  Поле - Строка, ПользовательскоеПолеВыборКомпоновкиДанных, ПользовательскоеПолеВыражениеКомпоновкиДанных, ПолеКомпоновкиДанных - Источник поля
// 
// Возвращаемое значение:
//  ПолеКомпоновкиДанных
Функция ПолеКомпоновкиДанных(Поле) Экспорт
	
	Если ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных") Тогда
		Возврат Поле;
	КонецЕсли;
	
	ПутьКДанным = "";
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		ПутьКДанным = Поле;
	ИначеЕсли ТипЗнч(Поле) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(Поле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
		ПутьКДанным = Поле.ПутьКДанным;
	КонецЕсли;
	
	Возврат Новый ПолеКомпоновкиДанных(ПутьКДанным);
	
КонецФункции

// Новый объект СКД
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Возвращаемое значение:
//  СхемаКомпоновкиДанных
Функция НовыйСКД() Экспорт
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
    Источник.Имя = "ЛокальнаяБаза";
    Источник.СтрокаСоединения = "";
    Источник.ТипИсточникаДанных = "Local";
	
	Возврат СхемаКомпоновкиДанных;
		
КонецФункции

// Добавить набор данных объект.
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  СКД - СхемаКомпоновкиДанных
//  Имя - Строка
//  ИмяОбъекта - Строка
// 
// Возвращаемое значение:
//  НаборДанныхОбъектСхемыКомпоновкиДанных
Функция ДобавитьНаборДанныхОбъект(СКД, Имя, ИмяОбъекта = "") Экспорт
	
	НаборДанных	= СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = Имя;
	НаборДанных.ИмяОбъекта = ?(ИмяОбъекта = "", Имя, ИмяОбъекта);
	НаборДанных.ИсточникДанных = СКД.ИсточникиДанных.Получить(0).Имя;
	
	Возврат НаборДанных;
		
КонецФункции

// Добавить набор данных запрос.
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  СКД - СхемаКомпоновкиДанных
//  Имя - Строка
//  Запрос - Строка
// 
// Возвращаемое значение:
//  НаборДанныхЗапросСхемыКомпоновкиДанных
Функция ДобавитьНаборДанныхЗапрос(СКД, Имя, Запрос) Экспорт
	
	НаборДанных	= СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = Имя;
	НаборДанных.Запрос = Запрос;
	
	НаборДанных.ИсточникДанных = СКД.ИсточникиДанных.Получить(0).Имя;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Возврат НаборДанных;
		
КонецФункции

// Добавить поле набора данных.
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  НаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных
//  Поле - Строка
//  Заголовок - Строка
//  ПутьКДанным - Строка
//  ТипЗначения - Строка, ОписаниеТипов - Тип значения
// 
// Возвращаемое значение:
//  ПолеНабораДанныхСхемыКомпоновкиДанных
Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок = "", ПутьКДанным = "", Знач ТипЗначения = Неопределено) Экспорт
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле = Поле;
	НовоеПоле.ПутьКДанным = ?(ПутьКДанным = "", Поле, ПутьКДанным);
	НовоеПоле.Заголовок = Заголовок;
	
	Если ТипЗнч(ТипЗначения) = Тип("Строка") Тогда
		ТипЗначения = Новый ОписаниеТипов(ТипЗначения); // @skip-check statement-type-change - Бред ЕДТ
	Иначе
		ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	НовоеПоле.ТипЗначения = ТипЗначения;
	
	Возврат НовоеПоле;
		
КонецФункции

// Найти набор данных.
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  КоллекцияНаборов - СхемаКомпоновкиДанных
//  				 - НаборыДанныхСхемыКомпоновкиДанных
//  				 - НаборДанныхОбъединениеСхемыКомпоновкиДанных
//  ИмяНабораДанных - Строка
//  ВключаяПодчиненные - Булево
// 
// Возвращаемое значение:
//  - НаборДанныхЗапросСхемыКомпоновкиДанных
//  - НаборДанныхОбъединениеСхемыКомпоновкиДанных 
//  - НаборДанныхОбъектСхемыКомпоновкиДанных
Функция НайтиНаборДанных(КоллекцияНаборов, ИмяНабораДанных, ВключаяПодчиненные = Истина) Экспорт
	
	ПеребираемаяКоллекцияНаборов = Неопределено;
	Если ТипЗнч(КоллекцияНаборов) = Тип("СхемаКомпоновкиДанных") Тогда
		ПеребираемаяКоллекцияНаборов = КоллекцияНаборов.НаборыДанных;
	ИначеЕсли ТипЗнч(КоллекцияНаборов) = Тип("НаборыДанныхСхемыКомпоновкиДанных") Тогда
		ПеребираемаяКоллекцияНаборов = КоллекцияНаборов;
	ИначеЕсли ТипЗнч(КоллекцияНаборов) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		ПеребираемаяКоллекцияНаборов = КоллекцияНаборов.Элементы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныйНаборДанных = Неопределено;
	
	Для Каждого НаборДанных Из ПеребираемаяКоллекцияНаборов Цикл
		
		Если НаборДанных.Имя = ИмяНабораДанных Тогда
			НайденныйНаборДанных = НаборДанных;
		ИначеЕсли ВключаяПодчиненные Тогда
			НайденныйНаборДанных = НайтиНаборДанных(НаборДанных, ИмяНабораДанных, ВключаяПодчиненные);
		КонецЕсли;
		
		Если НЕ НайденныйНаборДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйНаборДанных;
	
КонецФункции

// Структура параметров настроек компоновки данных
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
// 
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных
//  НастройкиКомпоновки - НастройкиКомпоновкиДанных
// 
// Возвращаемое значение:
//  Структура
Функция ПараметрыДанныхСтруктурой(СхемаКомпоновкиДанных, НастройкиКомпоновки) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого ПараметрСхемы Из СхемаКомпоновкиДанных.Параметры Цикл
		
		ИмяПараметра = ПараметрСхемы.Имя;
		
		ПараметрНастроек = НастройкиКомпоновки.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных(ИмяПараметра));
			
		Если ПараметрНастроек = Неопределено ИЛИ НЕ ПараметрНастроек.Использование Тогда
			Если ПараметрСхемы.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда Тогда
				ЗначениеПараметра = ПараметрСхемы.Значение;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			ЗначениеПараметра = ПараметрНастроек.Значение;
		КонецЕсли;
		
		Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Рекурсивно удаляет недоступные элементы из коллекции отборов
//
// Написан для статьи Как ограничить поля отбора в динамическом списке и ничего не сломать: 
// https://infostart.ru/public/1226445/?ref=1159
//
// Пример использования для ДС:
//    Список.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
//    УдалитьНедоступныеОтборы(Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы);
//
// Параметры:
//  Коллекция  - КоллекцияЭлементовПользовательскихНастроекКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных - Коллекция элементов отбора.
//  ДоступныеПоляОтбора  - Неопределено, ДоступныеПоляКомпоновкиДанных - Список доступных полей отбора. При первоначальном вызове не передаётся.
//
Процедура УдалитьНедоступныеОтборы(Знач Коллекция, Знач ДоступныеПоляОтбора = Неопределено) Экспорт
	
	УдаляемыеЭлементы = Новый Массив; // Массив из ЭлементОтбораКомпоновкиДанных
	
	Для Каждого ТекущиеДанные Из Коллекция Цикл
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ОтборКомпоновкиДанных") Тогда
			
			УдалитьНедоступныеОтборы(ТекущиеДанные.Элементы, ТекущиеДанные.ДоступныеПоляОтбора);
			
		ИначеЕсли ТипЗнч(ТекущиеДанные) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			УдалитьНедоступныеОтборы(ТекущиеДанные.Элементы, ДоступныеПоляОтбора);
			                 
		ИначеЕсли ТипЗнч(ТекущиеДанные) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если НЕ ТекущиеДанные.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИмяСвойства Из СтрРазделить("ЛевоеЗначение,ПравоеЗначение",",") Цикл
				
				ТекущееПоле = ТекущиеДанные[ИмяСвойства]; // ПолеКомпоновкиДанных
				Если ТипЗнч(ТекущееПоле) = Тип("ПолеКомпоновкиДанных") 
					И ДоступныеПоляОтбора.НайтиПоле(ТекущееПоле) = Неопределено Тогда
					
					УдаляемыеЭлементы.Добавить(ТекущиеДанные);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Коллекция.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
