// @strict-types

#Область ПрограммныйИнтерфейс

// Заменяет в строке именованные параметры на значения свойств объекта (по формату %ИмяСвойства%)
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  ШаблонСтроки - Строка - Строка, в которую необходимо всавить свойства объекта
//  Объект - Произвольный - Произвольный объект, свойства которого необходимо вставить в строку
// 
// Возвращаемое значение:
//  Строка
Функция ВставитьПараметрыВСтроку(Знач ШаблонСтроки, Знач Объект) Экспорт
	
	Разделитель = "%";
	ЭтоПараметр = Ложь;
	ЧастиСтроки = СтрРазделить(ШаблонСтроки, Разделитель, Истина);
	Для Индекс = 0 По ЧастиСтроки.Количество() - 1 Цикл
		
		Если ЭтоПараметр Тогда
			ИмяСвойства = ЧастиСтроки[Индекс];
			ЧастиСтроки[Индекс] = Строка(Объект[ИмяСвойства]);
			ЭтоПараметр = Ложь;
		Иначе
			ЭтоПараметр = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиСтроки, "");
	
КонецФункции

// Возвращает форматированную строку, в которой части выделены.
// Например, "Выдели `слово` в предложении"
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  Строка - Строка
//  Выделитель - Строка - Символ, который обрамляет выделяемую строку
// 
// Возвращаемое значение:
//  Строка
Функция СтрокаВыделеннаяОформлением(Знач Строка, Знач Выделитель = "`") Экспорт
	
	ЭтоВыделить = Ложь;
	ЧастиСтроки = СтрРазделить(Строка, Выделитель, Истина);
	Для Индекс = 0 По ЧастиСтроки.Количество() - 1 Цикл
		
		Если ЭтоВыделить Тогда
			ЧастьСтроки = ЧастиСтроки[Индекс];
			ЧастьСтроки = СтрНайтиИВыделитьОформлением(ЧастьСтроки, ЧастьСтроки);
			ЧастиСтроки[Индекс] = ЧастьСтроки;
			ЭтоВыделить = Ложь;
		Иначе
			ЭтоВыделить = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецФункции

// Метод выделяет подстроку внутри подстроки с использованием метода см. СтрНайтиИВыделитьОформлением
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  Строка - Строка - Исходная строка
//  Подстрока - Строка - Искомая строка
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока, Неопределено - вернет форматированную строку, если хотя бы одно вхождение найдено
Функция СтрокаНайтиИВыделитьОформлением(Знач Строка, Знач Подстрока) Экспорт

	СтрокаВрег = ВРег(Строка);
	ПодстрокаВрег = ВРег(Подстрока);

	ДлинаСтроки = СтрДлина(Строка);
	ДлинаПодстроки = СтрДлина(Подстрока);

	ЧастиРезультата = Новый Массив; // Массив из Строка, ФорматированнаяСтрока

	НачалоПоиска = 1;
	Пока НачалоПоиска <= ДлинаСтроки Цикл

		ТекущаяКоордината = СтрНайти(СтрокаВрег, ПодстрокаВрег, , НачалоПоиска);
		Если ТекущаяКоордината = 0 Тогда

			Если ЗначениеЗаполнено(ЧастиРезультата) Тогда
				ЧастьСтроки = Сред(Строка, НачалоПоиска);
				ЧастиРезультата.Добавить(ЧастьСтроки);
				Прервать;
			Иначе
				Возврат Неопределено;
			КонецЕсли;

		Иначе

			Если НачалоПоиска < ТекущаяКоордината Тогда
				ЧастьСтроки = Сред(Строка, НачалоПоиска, ТекущаяКоордината - НачалоПоиска);
				ЧастиРезультата.Добавить(ЧастьСтроки);
			КонецЕсли;

			ЧастьСтроки = Сред(Строка, ТекущаяКоордината, ДлинаПодстроки);
			ЧастьСтроки = СтрНайтиИВыделитьОформлением(ЧастьСтроки, Подстрока);
			ЧастиРезультата.Добавить(ЧастьСтроки);

			НачалоПоиска = ТекущаяКоордината + ДлинаПодстроки;

		КонецЕсли;
		
	КонецЦикла;

	Возврат Новый ФорматированнаяСтрока(ЧастиРезультата);

КонецФункции

// Возвращает результат проверки корректности шаблона строки (метода СтрШаблон)
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
//  
// Параметры:
//  ШаблонСтроки - Строка
// 
// Возвращаемое значение:
//  Булево - Корректен ли шаблон строки
Функция ШаблонСтрокиКорректен(Знач ШаблонСтроки) Экспорт
	
	Попытка
		ПроверитьШаблонСтроки(ШаблонСтроки);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Проверяет корректность шаблона строки (метода СтрШаблон)
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
// 
// Параметры:
//  ШаблонСтроки - Строка
Процедура ПроверитьШаблонСтроки(Знач ШаблонСтроки) Экспорт
	
	СтрШаблон(ШаблонСтроки, Неопределено, Неопределено, 
    	Неопределено, Неопределено, Неопределено, Неопределено, 
    	Неопределено, Неопределено, Неопределено, Неопределено);
	
КонецПроцедуры

// Возвращает строку нужной длины из указанного символа
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
// 
// Параметры:
//  Длина - Число
//  Символ - Строка
// 
// Возвращаемое значение:
//  Строка
Функция СтрокаСимволов(Знач Длина, Знач Символ = " ") Экспорт
	
	Квалификатор = Новый КвалификаторыСтроки(Длина, ДопустимаяДлина.Фиксированная);
	ОписаниеТипов = Новый ОписаниеТипов("Строка", Квалификатор);
	Результат = ОписаниеТипов.ПривестиЗначение(""); // Строка
	Если Символ <> " " Тогда
		Результат = СтрЗаменить(Результат, " ", Символ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// @skip-check method-too-many-params
// Перед вставкой параметров проверяет
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
// 
// Параметры:
//  Шаблон - Строка
//  Параметр1 - Произвольный
//  Параметр2 - Произвольный
//  Параметр3 - Произвольный
//  Параметр4 - Произвольный
//  Параметр5 - Произвольный
//  Параметр6 - Произвольный
//  Параметр7 - Произвольный
//  Параметр8 - Произвольный
//  Параметр9 - Произвольный
//  Параметр10 - Произвольный
// 
// Возвращаемое значение:
//  Строка
Функция СтрШаблонБезопасно(Знач Шаблон, Знач Параметр1 = Неопределено, 
	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено, 
	Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено,
	Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено, Знач Параметр10 = Неопределено) Экспорт
	
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр1, 1);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр2, 2);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр3, 3);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр4, 4);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр5, 5);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр6, 6);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр7, 7);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр8, 8);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр9, 9);
	ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Шаблон, Параметр10, 10);
	
	Возврат СтрШаблон(Шаблон, 
		Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, 
		Параметр6, Параметр7, Параметр8, Параметр9, Параметр10);
	
КонецФункции

// Затереть параметр при его отсутствии в шаблоне.
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS
// 
// Параметры:
//  Шаблон - Строка
//  Параметр - Произвольный
//  Номер - Число
Процедура ЗатеретьПараметрПриЕгоОтсутствииВШаблоне(Знач Шаблон, Параметр, Знач Номер) Экспорт
	
	Если Параметр <> Неопределено И СтрНайти(Шаблон, "%" + Номер) = 0 Тогда
		Параметр = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
