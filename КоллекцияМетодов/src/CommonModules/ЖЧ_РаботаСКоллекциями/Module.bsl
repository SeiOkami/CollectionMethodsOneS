// @strict-types

#Область ПрограммныйИнтерфейс

// Сворачивает табличную часть по всем колонкам. 
// Числовые колонки при этом суммируются
//
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть
//
Процедура СвернутьТабличнуюЧасть(ТабличнаяЧасть) Экспорт
	
	Ресурсы = Новый Массив; // Массив из Строка
	Измерения = Новый Массив; // Массив из Строка
	
	МетаданныеТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)); // ОбъектМетаданныхТабличнаяЧасть
	Для Каждого МетаданныеКолонки Из МетаданныеТабличнойЧасти.Реквизиты Цикл
		ИмяКолонки = МетаданныеКолонки.Имя;
		Если МетаданныеКолонки.Тип.СодержитТип(Тип("Число")) Тогда
			Ресурсы.Добавить(ИмяКолонки);
		Иначе
			Измерения.Добавить(ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	ИменаИзмерений = СтрСоединить(Измерения, ",");
	ИменаРесурсов = СтрСоединить(Ресурсы, ",");
	
	ТабличнаяЧасть.Свернуть(ИменаИзмерений, ИменаРесурсов);
	
КонецПроцедуры

// Функция возвращает копию переданной таблицы значений, но исключая из всех колонок тип Null
// Бывает полезна для обработки выгрузки запроса, в котором у каждой колонки есть тип Null
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица без Null
//
Функция ТаблицаЗначенийБезNull(ТаблицаЗначений) Экспорт
	
	НоваяТаблица = Новый ТаблицаЗначений;
	Для Каждого ТекущаяКолонка Из ТаблицаЗначений.Колонки Цикл
		ОписаниеТипа = Новый ОписаниеТипов(ТекущаяКолонка.ТипЗначения, , "NULL");
        НоваяТаблица.Колонки.Добавить(ТекущаяКолонка.Имя, ОписаниеТипа,
			ТекущаяКолонка.Заголовок, ТекущаяКолонка.Ширина);
    КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из ТаблицаЗначений Цикл
        ЗаполнитьЗначенияСвойств(НоваяТаблица.Добавить(), ТекущаяСтрока);
    КонецЦикла;
    
    Возврат НоваяТаблица;

КонецФункции

// Добавляет новую колонку или обновляет существующую
// Если колонка уже есть, то обновляет свойства Заголовок и Ширина
//
// Параметры:
//  ТаблицаЗначений  - ТаблицаЗначений - Таблица значений, в которую нужно добавить колонку
//  Имя              - Строка - Имя колонки
//  Тип              - ОписаниеТипов, Неопределено - Объект, описывающий допустимые типы значений для колонки. 
//                 Если параметр не указан, в колонке можно будет хранить значение любого типа.
//  Заголовок        - Строка, Неопределено - Заголовок колонки таблицы значений.
//                 Используется при визуальном отображении таблицы значений.
//  Ширина           - Число, Неопределено - Ширина колонки в символах.
//                 Используется при визуальном отображении таблицы значений.
//
// Возвращаемое значение:
//   КолонкаТаблицыЗначений - добавленная (или найденная) колонка 
//
Функция ОбновленнаяКолонкаТаблицы(ТаблицаЗначений, Имя, 
	Тип = Неопределено, Заголовок = Неопределено, Ширина = Неопределено) Экспорт
	
	Колонка	= ТаблицаЗначений.Колонки.Найти(Имя);
	Если Колонка = Неопределено Тогда
		Колонка	= ТаблицаЗначений.Колонки.Добавить(Имя, Тип);
	КонецЕсли;
	
	Если Заголовок <> Неопределено Тогда
		Колонка.Заголовок	= Заголовок;
	КонецЕсли;
	
	Если Ширина <> Неопределено Тогда
		Колонка.Ширина	= Ширина;
	КонецЕсли;
	
	Возврат Колонка;
	
КонецФункции

// Возвращает новую таблицу значений с добавлением новой колонки в обход ограничений доступных символов в имени.
// Использовать не рекомендуется. Просто забавы ради.
//
// Параметры:
//  ПлохоеИмя		 - Строка - Имя добавляемой колонки, которое может не соответствовать требованиям к символам
//  ИсходнаяТаблица	 - Неопределено, ТаблицаЗначений - Функция вернет новую ТЗ на основе переданной
//  ОписаниеТипа	 - ОписаниеТипов, Неопределено - Описание типа добавляемой колонки
//  Заголовок		 - Строка - Заголовок добавляемой колонки
// 
// Возвращаемое значение:
//  ТаблицаЗначений - новая таблица значений с добавленной колонкой
//
// Пример использования:
//  ТЗ = ТаблицаЗначенийСПлохойКолонкой("12345");
//	ТЗ = ТаблицаЗначенийСПлохойКолонкой("  --23-502  =-2-=6524-0624 ", ТЗ);
Функция ТаблицаЗначенийСПлохойКолонкой(ПлохоеИмя, ИсходнаяТаблица = Неопределено, 
	ОписаниеТипа = Неопределено, Заголовок = "") Экспорт
	
	ТаблицаЗначений = ?(ИсходнаяТаблица = Неопределено, 
		Новый ТаблицаЗначений, ИсходнаяТаблица);
		
	ВременноеИмя = "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	ТаблицаЗначений.Колонки.Добавить(ВременноеИмя, ОписаниеТипа, Заголовок);
	СтрокаВнутр = ЗначениеВСтрокуВнутр(ТаблицаЗначений);
	СтрокаВнутр = СтрЗаменить(СтрокаВнутр, ВременноеИмя, ПлохоеИмя);
	
	ИсходнаяТаблица = ЗначениеИзСтрокиВнутр(СтрокаВнутр); // ТаблицаЗначений
	Возврат ИсходнаяТаблица; //@skip-check constructor-function-return-section - Баг ЕДТ - не понимает типизированный коммент
		
КонецФункции

// Возвращает имена колонок таблицы, по которым во всех строках пустые значения
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - Таблица, в которой нужно найти пустые колонки
// 
// Возвращаемое значение:
//  Массив из Строка - Коллекция имен пустых колонок 
//
Функция ПустыеКолонкиТаблицыЗначений(Знач ТаблицаЗначений) Экспорт
	
	Результат = Новый Массив; // Массив из Строка
	Для Каждого ТекущаяКолонка Из ТаблицаЗначений.Колонки Цикл
		Результат.Добавить(ТекущаяКолонка.Имя);
	КонецЦикла;
	
	Для Каждого ТекущиеДанные Из ТаблицаЗначений Цикл
		
		ЗаполненныеКолонки = Новый Массив; // Массив из Строка
		Для Каждого ИмяКолонки Из Результат Цикл
			
			Если ТаблицаЗначений.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущиеДанные[ИмяКолонки]) Тогда
				ЗаполненныеКолонки.Добавить(ИмяКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЗаполненнаяКолонка Из ЗаполненныеКолонки Цикл
			Результат.Удалить(Результат.Найти(ЗаполненнаяКолонка));
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Выгружает колонку таблицы значений
//
//  Параметры:
//  Таблица - ТаблицаЗначений
//  ИмяКолонки - Строка
//  Различные - Булево
//  Сортировать - Булево
// 
// Возвращаемое значение:
//  Массив из Произвольный
Функция ВыгрузитьКолонку(Знач Таблица, ИмяКолонки, Различные = Ложь, Сортировать = Ложь) Экспорт
	
	Если Различные ИЛИ Сортировать Тогда
		
		Таблица = Таблица.Скопировать(, ИмяКолонки);
		
		Если Различные Тогда
			Таблица.Свернуть(ИмяКолонки);
		КонецЕсли;
		
		Если Сортировать Тогда
			Таблица.Сортировать(ИмяКолонки);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Таблица.ВыгрузитьКолонку(ИмяКолонки);
	
КонецФункции

// Таблица значений из строки.
// 
// Параметры:
//  Текст - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений
Функция ТаблицаЗначенийИзСтроки(Текст) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	ЗаполнитьТаблицуЗначенийИзСтроки(Текст, Таблица, Истина);
	
	Возврат Таблица;
	
КонецФункции

// Заполнить таблицу значений из строки
// 
// Параметры:
//  Текст   - Строка
//  Таблица - ТаблицаЗначений, Неопределено - Таблица или переменная, в которую она будет помещена
//  ДополнятьКолонками - Булево - Нужно ли дополнять колонками таблицу
Процедура ЗаполнитьТаблицуЗначенийИзСтроки(Текст, Таблица = Неопределено, ДополнятьКолонками = Ложь) Экспорт
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений();
	КонецЕсли;
	
	ЧислоСтрок   = СтрЧислоСтрок(Текст);
	ИменаКолонок = Новый Массив; // Массив из Строка
	Разделитель  = "|";
	
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		
		СтрокаТекста = СтрПолучитьСтроку(Текст, НомерСтроки);
		Если ПустаяСтрока(СтрокаТекста) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиСтроки = СтрРазделить(СтрокаТекста, Разделитель, Истина);
		ЗаполненыКолонки = ЗначениеЗаполнено(ИменаКолонок);
		
		Если ЗаполненыКолонки Тогда
			СтрокаТаблицы = Таблица.Добавить();
		КонецЕсли;
		
		Для ИндексЧасти = 0 По ЧастиСтроки.Количество() - 1 Цикл
			
			ЧастьСтроки = СокрЛП(ЧастиСтроки[ИндексЧасти]);
			
			Если ПустаяСтрока(ЧастьСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаполненыКолонки Тогда
				СтрокаТаблицы[ИменаКолонок[ИндексЧасти]] = ЧастьСтроки;
			Иначе
				ИменаКолонок.Добавить(ЧастьСтроки);
				Если ДополнятьКолонками И Таблица.Колонки.Найти(ЧастьСтроки) = Неопределено Тогда
					Таблица.Колонки.Добавить(ЧастьСтроки, Новый ОписаниеТипов("Строка"));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Имена колонок таблицы значений.
// 
// Параметры:
//  Таблица - ТаблицаЗначений
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ИменаКолонокТаблицы(Таблица) Экспорт
	
	ИменаКолонок = Новый Массив; // Массив из Строка
	Для Каждого Колонка Из Таблица.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;

	Возврат ИменаКолонок;
	
КонецФункции

#КонецОбласти
