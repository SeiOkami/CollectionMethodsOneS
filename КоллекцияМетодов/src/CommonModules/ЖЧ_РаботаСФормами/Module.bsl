// @strict-types
// @skip-check statement-type-change

#Область ПрограммныйИнтерфейс

#Если Клиент Тогда

// Если форма открыта в другом окне, то процедура отключает автоматическое сохранение настроек списка
// Например, когда форма открывается из навигационной панели другой формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма списка
//  ИмяСписка - Строка - Имя списка. По умолчанию "Список"
//
Процедура ОтключитьСохранениеНастроекСпискаПриОткрытииВОкне(Форма, ИмяСписка = "Список") Экспорт
	
	Если НЕ Форма.Окно = Неопределено Тогда
		ЭлементСписка = Форма[ИмяСписка]; // ДинамическийСписок
		ЭлементСписка.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#Если НЕ ВебКлиент Тогда

// Структура из параметров формы.
// 
// Параметры:
//  ПараметрыФормы - ДанныеФормыСтруктура
// 
// Возвращаемое значение:
//  Структура
Функция СтруктураИзПараметровФормы(ПараметрыФормы) Экспорт
	
	Результат = Новый Структура;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ПараметрыФормы, НазначениеТипаXML.Явное);
	СтрокаXML = ЗаписьXML.Закрыть();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "structure" 
			И ЧтениеXML.ПолучитьАтрибут("name") = "parameters" 
			И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Прервать;
			             
		ИначеЕсли ЧтениеXML.Имя = "field" Тогда
			
			ТекущийКлюч	= ЧтениеXML.ПолучитьАтрибут("nameRu");
			ТекущийКлюч	= ?(ЗначениеЗаполнено(ТекущийКлюч), ТекущийКлюч, ЧтениеXML.ПолучитьАтрибут("name"));
			Если ЗначениеЗаполнено(ТекущийКлюч) Тогда
				Результат.Вставить(ТекущийКлюч);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыФормы);
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

// Добавляет элемент условного оформления по параметрам
//
// Параметры:
//  УсловноеОформление	 - УсловноеОформлениеКомпоновкиДанных - Коллекция условного оформления
//  ОформляемыеПоля		 - Строка, Массив из Строка - Имена полей, на которых распространяется условное оформление
//  УсловияОтбора		 - Структура, Массив из Структура - Условия отбора оформления. 
//  ПараметрыОформления	 - Структура - Параметры оформления
// 
// Возвращаемое значение:
//  ЭлементУсловногоОформленияКомпоновкиДанных  - добавленный элемент
//
Функция НовыйЭлементУсловногоОформления(УсловноеОформление, 
	ОформляемыеПоля, УсловияОтбора, ПараметрыОформления) Экспорт
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.Использование = Истина;
	
	Для Каждого КлючИЗначение Из ПараметрыОформления Цикл
		НовыйЭлемент.Оформление.УстановитьЗначениеПараметра(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ТипЗнч(ОформляемыеПоля) = Тип("Строка") Тогда
		КоллекцияДобавляемыхПолей = СтрРазделить(ОформляемыеПоля, ",");
	Иначе
		КоллекцияДобавляемыхПолей = ОформляемыеПоля;
	КонецЕсли;
	
	Для Каждого ДобавляемоеПоле Из КоллекцияДобавляемыхПолей Цикл
		ОформляемоеПолеКомпоновкиДанных = НовыйЭлемент.Поля.Элементы.Добавить();
		ОформляемоеПолеКомпоновкиДанных.Использование = Истина;
		ОформляемоеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(ДобавляемоеПоле);
	КонецЦикла;
	
	Если ТипЗнч(УсловияОтбора) = Тип("Массив") Тогда
		КоллекцияУсловий = УсловияОтбора;
	Иначе
		КоллекцияУсловий = Новый Массив(1);
		КоллекцияУсловий[0] = УсловияОтбора;
	КонецЕсли;
	
	Для Каждого УсловиеОтбора Из КоллекцияУсловий Цикл
		ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, УсловиеОтбора);
	КонецЦикла;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Обновить признак предупреждения при редактировании элемента.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИменаЭлементов - Строка, Массив из Строка - Имена элементов предупреждения
//  ПроверяемыеДанные - Строка, Массив из Строка - Проверяемые данные
Процедура ОбновитьПризнакПредупрежденияПриРедактированииЭлемента(Форма, Знач ИменаЭлементов, Знач ПроверяемыеДанные) Экспорт
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
		ИменаЭлементов = СтрРазделить(ИменаЭлементов, "," + Символы.ПС, Ложь);
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемыеДанные) = Тип("Строка") Тогда
		ПроверяемыеДанные = СтрРазделить(ПроверяемыеДанные, "," + Символы.ПС, Ложь);
	КонецЕсли;
	
	ПризнакПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Для Каждого ИмяДанных Из ПроверяемыеДанные Цикл
		ДанныеЗаполнены = ЗначениеЗаполнено(Форма[ИмяДанных]);
		Если ДанныеЗаполнены Тогда
			ПризнакПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		
		Элемент = Форма.Элементы.Найти(ИмяЭлемента);
		Если Элемент.ОтображениеПредупрежденияПриРедактировании <> ПризнакПредупреждения Тогда
			Элемент.ОтображениеПредупрежденияПриРедактировании = ПризнакПредупреждения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Текущие данные таблицы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяТаблицы - Строка
// 
// Возвращаемое значение:
//  ДанныеФормыЭлементКоллекции
Функция ТекущиеДанныеТаблицы(Форма, ИмяТаблицы) Экспорт
	
	Результат = Неопределено; // ДанныеФормыЭлементКоллекции
	
	ЭлементФормы = Форма.Элементы[ИмяТаблицы];
	
	#Если Клиент Тогда
		
		Результат = ЭлементФормы.ТекущиеДанные;
		
	#Иначе
		
		ТекущаяСтрока = ЭлементФормы.ТекущаяСтрока;
		Если ТипЗнч(ТекущаяСтрока) = Тип("Число") Тогда
			
			ТаблицаФормы = Форма; // ДанныеФормыДерево
			ЧастиПути = СтрРазделить(ЭлементФормы.ПутьКДанным, ".");
			Для Каждого ЧастьПути Из ЧастиПути Цикл
				ТаблицаФормы = ТаблицаФормы[ЧастьПути];
			КонецЦикла;
			
			Если ТипЗнч(ТаблицаФормы) = Тип("ДанныеФормыКоллекция")
				ИЛИ ТипЗнч(ТаблицаФормы) = Тип("ДанныеФормыСтруктураСКоллекцией")
				ИЛИ ТипЗнч(ТаблицаФормы) = Тип("ДанныеФормыДерево") Тогда
				Результат = ТаблицаФормы.НайтиПоИдентификатору(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
			
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
