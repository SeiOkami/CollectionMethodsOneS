
#Область СлужебныйПрограммныйИнтерфейс

// Регистрация тестов
Процедура ИсполняемыеСценарии() Экспорт

	Перем ЮТТесты;
	ЮТТесты = ЖЧТ_Движок.ЮТТесты();
	
	ЮТТесты
		.ДобавитьТестовыйНабор("НайтиСсылкуПоРеквизиту")
			.ДобавитьТест("Тест_НайтиСсылкуПоРеквизиту_Успешно").ВТранзакции()
			.ДобавитьТест("Тест_НайтиСсылкуПоРеквизиту_Пусто")
			.ДобавитьТест("Тест_НайтиСсылкуПоРеквизиту_Ошибка_Метаданные")
			.ДобавитьТест("Тест_НайтиСсылкуПоРеквизиту_Ошибка_Реквизит")
			.ДобавитьТест("Тест_НайтиСсылкуПоРеквизиту_Ошибка_Значение")
		.ДобавитьТестовыйНабор("КлючМенеджераЗаписиРегистраСведений")
			.ДобавитьТест("Тест_КлючМенеджераЗаписиРегистраСведений")
		.ДобавитьТестовыйНабор("РодителиЭлемента").ВТранзакции()
			.ДобавитьТест("Тест_РодителиЭлемента")
		.ДобавитьТестовыйНабор("ЭлементБазыУникален").ВТранзакции()
			.ДобавитьТест("Тест_ЭлементБазыУникален")
		.ДобавитьТестовыйНабор("ДанныеТаблицыБазы")
			.ДобавитьТест("Тест_ДанныеТаблицыБазы_Отборы").ВТранзакции()
			.ДобавитьТест("Тест_ДанныеТаблицыБазы_Колонки")
				.СПараметрами("Справочник.ЖЧТ_ТестовыйСправочник", "Ссылка,Наименование,Код,ПометкаУдаления")
				.СПараметрами("РегистрСведений.ЖЧТ_РегистрСведений", "Измерение,Ресурс")
			
	;

КонецПроцедуры

#Область Тесты

#Область НайтиСсылкуПоРеквизиту

Процедура Тест_НайтиСсылкуПоРеквизиту_Успешно() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТекущиеМетаданные = Метаданные.Справочники.ЖЧТ_ТестовыйСправочник;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Номер", 999);
	НовыйЭлемент = ЮТест.Данные().СоздатьЭлемент(ТекущиеМетаданные, "Тест", Реквизиты);
	
	НайденныйЭлемент = ТестируемыйМодуль.НайтиСсылкуПоРеквизиту(ТекущиеМетаданные, "Номер", Реквизиты.Номер);
	
	ЮТест.ОжидаетЧто(НайденныйЭлемент).Равно(НовыйЭлемент);
	
КонецПроцедуры

Процедура Тест_НайтиСсылкуПоРеквизиту_Пусто() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТекущиеМетаданные = Метаданные.Справочники.ЖЧТ_ТестовыйСправочник;
	
	НайденныйЭлемент = ТестируемыйМодуль.НайтиСсылкуПоРеквизиту(ТекущиеМетаданные, "Номер", 69);
	
	ЮТест.ОжидаетЧто(НайденныйЭлемент)
		.Равно(ТекущиеМетаданные.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение());
	
КонецПроцедуры

Процедура Тест_НайтиСсылкуПоРеквизиту_Ошибка_Метаданные() Экспорт

	Перем ЮТест, ЮТКоллекции;
	ЮТест = ЖЧТ_Движок.ЮТест();
	ЮТКоллекции = ЖЧТ_Движок.ЮТКоллекции();

	ЮТест.ОжидаетЧто(ТестируемыйМодуль())
		.Метод("НайтиСсылкуПоРеквизиту", 
			ЮТКоллекции.ЗначениеВМассиве(Неопределено, "", 0))
  		.ВыбрасываетИсключение("Значение не является значением объектного типа (ПолноеИмя)");
	
КонецПроцедуры

Процедура Тест_НайтиСсылкуПоРеквизиту_Ошибка_Реквизит() Экспорт

	Перем ЮТест, ЮТКоллекции;
	ЮТест = ЖЧТ_Движок.ЮТест();
	ЮТКоллекции = ЖЧТ_Движок.ЮТКоллекции();

	ЮТест.ОжидаетЧто(ТестируемыйМодуль())
		.Метод("НайтиСсылкуПоРеквизиту", 
			ЮТКоллекции.ЗначениеВМассиве(Метаданные.Справочники.ЖЧТ_ТестовыйСправочник, "ФейковыйРеквизит", 0))
  		.ВыбрасываетИсключение("Поле не найдено ""ФейковыйРеквизит""");
	
КонецПроцедуры

Процедура Тест_НайтиСсылкуПоРеквизиту_Ошибка_Значение() Экспорт

	Перем ЮТест, ЮТКоллекции;
	ЮТест = ЖЧТ_Движок.ЮТест();
	ЮТКоллекции = ЖЧТ_Движок.ЮТКоллекции();

	ЮТест.ОжидаетЧто(ТестируемыйМодуль())
		.Метод("НайтиСсылкуПоРеквизиту", 
			ЮТКоллекции.ЗначениеВМассиве(Метаданные.Справочники.ЖЧТ_ТестовыйСправочник, "Номер", Новый Массив))
  		.ВыбрасываетИсключение("Неверные параметры в операции сравнения.");
	
КонецПроцедуры

#КонецОбласти

#Область КлючМенеджераЗаписиРегистраСведений

Процедура Тест_КлючМенеджераЗаписиРегистраСведений() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Данные = Новый Структура;
	Данные.Вставить("Измерение", "Тест");
	
	Результат = ТестируемыйМодуль.КлючМенеджераЗаписиРегистраСведений(
		Данные, Метаданные.РегистрыСведений.ЖЧТ_РегистрСведений.Имя);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип(Тип("РегистрСведенийКлючЗаписи.ЖЧТ_РегистрСведений"));
		
	Для Каждого КлючИЗначение Из Данные Цикл
		ЮТест.ОжидаетЧто(Результат)
			.Свойство(КлючИЗначение.Ключ).Равно(КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РодителиЭлемента

Процедура Тест_РодителиЭлемента() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	МенеджерТаблицы = Справочники.ЖЧТ_ТестовыйСправочник;

	Элемент1 = ЮТест.Данные().СоздатьЭлемент(МенеджерТаблицы);
	Элемент2 = ЮТест.Данные().СоздатьЭлемент(МенеджерТаблицы,, 
		Новый Структура("Родитель", Элемент1));
	Элемент3 = ЮТест.Данные().СоздатьЭлемент(МенеджерТаблицы,, 
		Новый Структура("Родитель", Элемент2));
	Элемент4 = ЮТест.Данные().СоздатьЭлемент(МенеджерТаблицы,,
		Новый Структура("Родитель", Элемент3));
	Элемент5 = ЮТест.Данные().СоздатьЭлемент(МенеджерТаблицы,,
		Новый Структура("Родитель", Элемент4));
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Результат = ТестируемыйМодуль.РодителиЭлемента(Элемент5, 2);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.Элемент(0).Равно(Элемент4)
		.Элемент(1).Равно(Элемент3)
		.Элемент(2).Равно(Элемент2)
		.Элемент(3).Равно(Элемент1)
	
	;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлементБазыУникален

Процедура Тест_ЭлементБазыУникален() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	МенеджерТаблицы = Справочники.ЖЧТ_ТестовыйСправочник;

	Наименование = Строка(Новый УникальныйИдентификатор());
	
	Элемент1 = ЮТест.Данные().КонструкторОбъекта(МенеджерТаблицы)
    	.ФикцияОбязательныхПолей()
    	.Установить("Наименование", Наименование)
    	.Записать(Ложь, Истина);

	Результат = ТестируемыйМодуль.ЭлементБазыУникален(Элемент1, "Наименование");
	ЮТест.ОжидаетЧто(Результат).ЭтоИстина();

	Элемент2 = ЮТест.Данные().КонструкторОбъекта(МенеджерТаблицы)
    	.ФикцияОбязательныхПолей()
    	.Установить("Наименование", Наименование)
    	.Записать(Ложь, Истина);

	Результат = ТестируемыйМодуль.ЭлементБазыУникален(Элемент1, "Наименование");
	ЮТест.ОжидаетЧто(Результат).ЭтоЛожь();
	
	ДополнительныеОтборы = СтрШаблон("Код <> ""%1""", Элемент2.Код);
	Результат = ТестируемыйМодуль.ЭлементБазыУникален(Элемент1, "Наименование", ДополнительныеОтборы);
	ЮТест.ОжидаетЧто(Результат).ЭтоИстина();
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеТаблицыБазы

Процедура Тест_ДанныеТаблицыБазы_Колонки(ИмяТаблицы, СтрКолонки) Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	Колонки = СтрРазделить(СтрКолонки, ",");
	
	ТестируемыйМодуль  = ТестируемыйМодуль();
	
	РезультатИзСтроки  = ТестируемыйМодуль.ДанныеТаблицыБазы(ИмяТаблицы, Неопределено, СтрКолонки); // РезультатЗапроса
	РезультатИзМассива = ТестируемыйМодуль.ДанныеТаблицыБазы(ИмяТаблицы, Неопределено, СтрКолонки); // РезультатЗапроса
	
	ЮТест.ОжидаетЧто(РезультатИзСтроки.Колонки.Количество()).Равно(Колонки.Количество());
	ЮТест.ОжидаетЧто(РезультатИзМассива.Колонки.Количество()).Равно(Колонки.Количество());
	
	Для Каждого ИмяКолонки Из Колонки Цикл
		ЮТест.ОжидаетЧто(РезультатИзСтроки.Колонки.Найти(ИмяКолонки)).ЭтоНеНеопределено();
		ЮТест.ОжидаетЧто(РезультатИзМассива.Колонки.Найти(ИмяКолонки)).ЭтоНеНеопределено();
	КонецЦикла;
		
КонецПроцедуры

Процедура Тест_ДанныеТаблицыБазы_Отборы() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	ИмяТаблицы = "Справочник.ЖЧТ_ТестовыйСправочник";
	МенеджерТаблицы = Справочники.ЖЧТ_ТестовыйСправочник;

	Ключ = Строка(Новый УникальныйИдентификатор());
	
	Отборы = Новый Массив;
	Отборы.Добавить(Новый Структура("Имя,Значение", "Наименование", Ключ));
	
	Результат = ТестируемыйМодуль.ДанныеТаблицыБазы(ИмяТаблицы, Отборы, "Ссылка");
	ЮТест.ОжидаетЧто(Результат.Пустой()).ЭтоИстина();

	Элемент = ЮТест.Данные().КонструкторОбъекта(МенеджерТаблицы)
    	.ФикцияОбязательныхПолей()
    	.Установить("Наименование", Ключ)
    	.Записать(Ложь, Истина);
	
	Результат = ТестируемыйМодуль.ДанныеТаблицыБазы(ИмяТаблицы, Отборы, "Ссылка");
	ЮТест.ОжидаетЧто(Результат.Пустой()).ЭтоЛожь();
	ЮТест.ОжидаетЧто(Результат.Выгрузить()[0].Ссылка).Равно(Элемент);

	Отборы = Новый Массив;
	Отборы.Добавить(Новый Структура("Имя,Значение", "Код", Ключ));
	
	Результат = ТестируемыйМодуль.ДанныеТаблицыБазы(ИмяТаблицы, Отборы, "Ссылка");
	ЮТест.ОжидаетЧто(Результат.Пустой()).ЭтоИстина();

	Элемент = ЮТест.Данные().КонструкторОбъекта(МенеджерТаблицы)
    	.ФикцияОбязательныхПолей()
    	.Установить("Код", Ключ)
    	.Записать(Ложь, Истина);
	
	Результат = ТестируемыйМодуль.ДанныеТаблицыБазы(ИмяТаблицы, Отборы, "Ссылка");
	ЮТест.ОжидаетЧто(Результат.Пустой()).ЭтоЛожь();
	ЮТест.ОжидаетЧто(Результат.Выгрузить()[0].Ссылка).Равно(Элемент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Тестируемый модуль.
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция ТестируемыйМодуль() Экспорт

	Возврат ЖЧТ_Модули.РаботаСДанными();
	
КонецФункции

#КонецОбласти
