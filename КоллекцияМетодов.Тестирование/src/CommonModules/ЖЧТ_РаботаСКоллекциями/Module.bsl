
#Область СлужебныйПрограммныйИнтерфейс

// Регистрация тестов
Процедура ИсполняемыеСценарии() Экспорт

	Перем ЮТТесты;
	ЮТТесты = ЖЧТ_Движок.ЮТТесты();
	
	ЮТТесты
		.ДобавитьТестовыйНабор("СвернутьТабличнуюЧасть")
			.ДобавитьТест("Тест_СвернутьТабличнуюЧасть_БезРесурсов")
			.ДобавитьТест("Тест_СвернутьТабличнуюЧасть_ОдинРесурс")
			.ДобавитьТест("Тест_СвернутьТабличнуюЧасть_НесколькоРесурсов")
			.ДобавитьТест("Тест_СвернутьТабличнуюЧасть_БезИзмерений")
		.ДобавитьТестовыйНабор("ТаблицаЗначенийБезNull")
			.ДобавитьТест("Тест_ТаблицаЗначенийБезNull")
		.ДобавитьТестовыйНабор("ОбновленнаяКолонкаТаблицы")
			.ДобавитьТест("Тест_ОбновленнаяКолонкаТаблицы_Создание")
			.ДобавитьТест("Тест_ОбновленнаяКолонкаТаблицы_Обновление")
			.ДобавитьТест("Тест_ОбновленнаяКолонкаТаблицы_ОбновлениеКромеТипа")
		.ДобавитьТестовыйНабор("ТаблицаЗначенийСПлохойКолонкой")
			.ДобавитьТест("Тест_ТаблицаЗначенийСПлохойКолонкой", 
				"Создание новой таблицы с плохой колонкой").СПараметрами(Истина)
			.ДобавитьТест("Тест_ТаблицаЗначенийСПлохойКолонкой", 
				"Дополнение существующей таблицы значений плохой колонкой").СПараметрами(Ложь)
		.ДобавитьТестовыйНабор("ПустыеКолонкиТаблицыЗначений")
			.ДобавитьТест("Тест_ПустыеКолонкиТаблицыЗначений_ПустаяТаблицаБезКолонок", "Пустая ТЗ без колонок")
			.ДобавитьТест("Тест_ПустыеКолонкиТаблицыЗначений_БезКолонокИЕстьСтроки", "Без колонок и есть строки")
			.ДобавитьТест("Тест_ПустыеКолонкиТаблицыЗначений_ПустаяТаблицаСКолонками", "Пустая ТЗ с колонками")
			.ДобавитьТест("Тест_ПустыеКолонкиТаблицыЗначений_ТаблицаСКолонкамиИСПустымиСтроками", "ТЗ с колонками и с пустыми строками")
			.ДобавитьТест("Тест_ПустыеКолонкиТаблицыЗначений_ТаблицаСоСтрокамиИБезПустыхКолонок", "ТЗ со строками и без пустых колонок")
			.ДобавитьТест("Тест_ПустыеКолонкиТаблицыЗначений_ТаблицаСоСтрокамиИСПустойКолонкой", "ТЗ со строками и пустой колонкой")
			.ДобавитьТест("Тест_ПустыеКолонкиТаблицыЗначений_ТаблицаСоСтрокамиИСПочтиПустойКолонкой", "ТЗ со строками и почти пустой колонкой")
		.ДобавитьТестовыйНабор("ЗаполнитьТаблицуЗначенийИзСтроки")
			.ДобавитьТест("Тест_ЗаполнитьТаблицуЗначенийИзСтроки")
		.ДобавитьТестовыйНабор("ВыгрузитьКолонку")
			.ДобавитьТест("Тест_ВыгрузитьКолонку")
		.ДобавитьТестовыйНабор("ИменаКолонокТаблицы")
			.ДобавитьТест("Тест_ИменаКолонокТаблицы")
				.СПараметрами("Колонка1")
				.СПараметрами("Колонка1,Колонка2,Колонка3")
				.СПараметрами("")
		.ДобавитьТестовыйНабор("НовыйСписокЗначений")
			.ДобавитьТест("Тест_НовыйСписокЗначений_СписокЗначений")
			.ДобавитьТест("Тест_НовыйСписокЗначений_Массив")
			.ДобавитьТест("Тест_НовыйСписокЗначений_Произвольный")
		.ДобавитьТестовыйНабор("ТипизироватьКолонки")
			.ДобавитьТест("Тест_ТипизироватьКолонки")
		.ДобавитьТестовыйНабор("ИзменитьТипКолонки")
			.ДобавитьТест("Тест_ИзменитьТипКолонки")
		.ДобавитьТестовыйНабор("ОбъединитьТаблицыЗначений")
			.ДобавитьТест("Тест_ОбъединитьТаблицыЗначений")
		.ДобавитьТестовыйНабор("ЗаполнитьТаблицуИзДереваРекурсивно")
			.ДобавитьТест("Тест_ЗаполнитьТаблицуИзДереваРекурсивно")
		.ДобавитьТестовыйНабор("ЗаменитьСсылкиНаНавигационные")
			.ДобавитьТест("Тест_ЗаменитьСсылкиНаНавигационные")
				.СПараметрами("Массив")
				.СПараметрами("Структура")
				.СПараметрами("Соответствие")
				.СПараметрами("Рекурсивно")
		.ДобавитьТестовыйНабор("КопияМассива")
			.ДобавитьТест("Тест_КопияМассива")
				.СПараметрами("1,2,3,4,5", 1, 3, "2,3,4", "Три элемента с индекса 1")
				.СПараметрами("1,2,3,4,5", 1, 0, "2,3,4,5", "Все элементы с индекса 1")
				.СПараметрами("1,2,3,4,5", 0, 2, "1,2", "Первые 2 элемента")
				.СПараметрами("1,2,3,4,5", 0, 0, "1,2,3,4,5", "Полная копия массива")
		
	;

КонецПроцедуры

#Область Тесты

#Область СвернутьТабличнуюЧасть

Процедура Тест_СвернутьТабличнуюЧасть_БезРесурсов() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Эталон = Обработки.ЖЧТ_ОбработкаТестирования.Создать().СвернутьТабличнуюЧасть_БезРесурсов;
	Эталон.Добавить();
	
	Параметр = Обработки.ЖЧТ_ОбработкаТестирования.Создать().СвернутьТабличнуюЧасть_БезРесурсов;
	Параметр.Добавить();
	Параметр.Добавить();
	Параметр.Добавить();
	
	ТестируемыйМодуль.СвернутьТабличнуюЧасть(Параметр);
	
	ЮТест.ОжидаетЧто(Параметр.Выгрузить()).Равно(Эталон.Выгрузить());
	
КонецПроцедуры

Процедура Тест_СвернутьТабличнуюЧасть_ОдинРесурс() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Эталон = Обработки.ЖЧТ_ОбработкаТестирования.Создать().СвернутьТабличнуюЧасть_ОдинРесурс;
	
	Строка = Эталон.Добавить();
	Строка.Измерение1 = 1;
	Строка.Ресурс1 = 3;
	
	Строка = Эталон.Добавить();
	Строка.Измерение2 = 1;
	Строка.Ресурс1 = 1;
	
	Параметр = Обработки.ЖЧТ_ОбработкаТестирования.Создать().СвернутьТабличнуюЧасть_ОдинРесурс;
	
	Строка = Параметр.Добавить();
	Строка.Измерение1 = 1;
	Строка.Ресурс1 = 1;
	
	Строка = Параметр.Добавить();
	Строка.Измерение2 = 1;
	Строка.Ресурс1 = 1;
	
	Строка = Параметр.Добавить();
	Строка.Измерение1 = 1;
	Строка.Ресурс1 = 2;
	
	ТестируемыйМодуль.СвернутьТабличнуюЧасть(Параметр);
	
	ЮТест.ОжидаетЧто(Параметр.Выгрузить()).Равно(Эталон.Выгрузить());
	
КонецПроцедуры

Процедура Тест_СвернутьТабличнуюЧасть_НесколькоРесурсов() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Эталон = Обработки.ЖЧТ_ОбработкаТестирования.Создать().СвернутьТабличнуюЧасть_НесколькоРесурсов;
	
	Строка = Эталон.Добавить();
	Строка.Измерение1 = 1;
	Строка.Ресурс1 = 5;
	
	Строка = Эталон.Добавить();
	Строка.Измерение2 = 1;
	Строка.Ресурс2 = 10;
	
	Строка = Эталон.Добавить();
	
	Параметр = Обработки.ЖЧТ_ОбработкаТестирования.Создать().СвернутьТабличнуюЧасть_НесколькоРесурсов;
	
	Строка = Параметр.Добавить();
	Строка.Измерение1 = 1;
	Строка.Ресурс1 = 3;
	
	Строка = Параметр.Добавить();
	Строка.Измерение1 = 1;
	Строка.Ресурс1 = 2;
	
	Строка = Параметр.Добавить();
	Строка.Измерение2 = 1;
	Строка.Ресурс2 = 1;
	
	Строка = Параметр.Добавить();
	Строка.Измерение2 = 1;
	Строка.Ресурс2 = 9;
	
	Строка = Параметр.Добавить();
	
	ТестируемыйМодуль.СвернутьТабличнуюЧасть(Параметр);
	
	ЮТест.ОжидаетЧто(Параметр.Выгрузить()).Равно(Эталон.Выгрузить());
	
КонецПроцедуры

Процедура Тест_СвернутьТабличнуюЧасть_БезИзмерений() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Эталон = Обработки.ЖЧТ_ОбработкаТестирования.Создать().СвернутьТабличнуюЧасть_БезИзмерений;
	Строка = Эталон.Добавить();
	Строка.Ресурс1 = 3;
	Строка.Ресурс2 = 7;
	Строка.Ресурс3 = 11;
	
	Параметр = Обработки.ЖЧТ_ОбработкаТестирования.Создать().СвернутьТабличнуюЧасть_БезИзмерений;
	Параметр.Добавить().Ресурс1 = 1;
	Параметр.Добавить().Ресурс1 = 2;
	Параметр.Добавить().Ресурс2 = 3;
	Параметр.Добавить().Ресурс2 = 4;
	Параметр.Добавить().Ресурс3 = 5;
	Параметр.Добавить().Ресурс3 = 6;
	
	ТестируемыйМодуль.СвернутьТабличнуюЧасть(Параметр);
	
	ЮТест.ОжидаетЧто(Параметр.Выгрузить()).Равно(Эталон.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЗначенийБезNull

Процедура Тест_ТаблицаЗначенийБезNull() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Параметр = Новый ТаблицаЗначений;
	Параметр.Колонки.Добавить("К1", Новый ОписаниеТипов("Строка,Null"));
	Параметр.Колонки.Добавить("К2", Новый ОписаниеТипов("Число,Строка"));
	Параметр.Колонки.Добавить("К3", Новый ОписаниеТипов("Число,Дата,Null"));
	Параметр.Добавить().К1 = "тыц";
	Параметр.Добавить().К2 = "333";
	Параметр.Добавить().К3 = Null;
	
	Эталон = Новый ТаблицаЗначений;
	Эталон.Колонки.Добавить("К1", Новый ОписаниеТипов("Строка"));
	Эталон.Колонки.Добавить("К2", Новый ОписаниеТипов("Число,Строка"));
	Эталон.Колонки.Добавить("К3", Новый ОписаниеТипов("Число,Дата"));
	Эталон.Добавить().К1 = "тыц";
	Эталон.Добавить().К2 = "333";
	Эталон.Добавить().К3 = Неопределено;
	
	Результат = ТестируемыйМодуль.ТаблицаЗначенийБезNull(Параметр);
	
	ЮТест.ОжидаетЧто(Результат).Равно(Эталон);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновленнаяКолонкаТаблицы

Процедура Тест_ОбновленнаяКолонкаТаблицы_Создание() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Ожидания = Новый Структура;
	Ожидания.Вставить("Имя", "К");
	Ожидания.Вставить("ТипЗначения", Новый ОписаниеТипов("Число"));
	Ожидания.Вставить("Заголовок", "Колонка");
	Ожидания.Вставить("Ширина", 69);
	
	Таблица = Новый ТаблицаЗначений();
	Колонка = ТестируемыйМодуль.ОбновленнаяКолонкаТаблицы(Таблица, 
		Ожидания.Имя, Ожидания.ТипЗначения, Ожидания.Заголовок, Ожидания.Ширина);
	
	Тестировщик = ЮТест.ОжидаетЧто(Колонка);
	Для Каждого КлючИЗначение Из Ожидания Цикл
		Тестировщик.Свойство(КлючИЗначение.Ключ).Равно(КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура Тест_ОбновленнаяКолонкаТаблицы_Обновление() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Ожидания = Новый Структура;
	Ожидания.Вставить("Имя", "К");
	Ожидания.Вставить("ТипЗначения", Новый ОписаниеТипов("Число"));
	Ожидания.Вставить("Заголовок", "Колонка");
	Ожидания.Вставить("Ширина", 69);
	
	Таблица = Новый ТаблицаЗначений();
	Колонка = Таблица.Колонки.Добавить(Ожидания.Имя, Ожидания.ТипЗначения);
	Результат = ТестируемыйМодуль.ОбновленнаяКолонкаТаблицы(Таблица, 
		Ожидания.Имя, Ожидания.ТипЗначения, Ожидания.Заголовок, Ожидания.Ширина);
	
	Тестировщик = ЮТест.ОжидаетЧто(Колонка).Равно(Результат);
	Для Каждого КлючИЗначение Из Ожидания Цикл
		Тестировщик.Свойство(КлючИЗначение.Ключ).Равно(КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура Тест_ОбновленнаяКолонкаТаблицы_ОбновлениеКромеТипа() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Ожидания = Новый Структура;
	Ожидания.Вставить("Имя", "К");
	Ожидания.Вставить("СтарыйТипЗначения", Новый ОписаниеТипов("Число"));
	Ожидания.Вставить("НовыйТипЗначения", Новый ОписаниеТипов("Строка"));
	
	Таблица = Новый ТаблицаЗначений();
	Колонка = Таблица.Колонки.Добавить(Ожидания.Имя, Ожидания.СтарыйТипЗначения);
	Результат = ТестируемыйМодуль.ОбновленнаяКолонкаТаблицы(Таблица, Ожидания.Имя, Ожидания.НовыйТипЗначения);
	
	Тестировщик = ЮТест.ОжидаетЧто(Колонка)
		.Равно(Результат)
			.Свойство("ТипЗначения")
			.Равно(Ожидания.СтарыйТипЗначения);

КонецПроцедуры

#КонецОбласти

#Область ТаблицаЗначенийСПлохойКолонкой

Процедура Тест_ТаблицаЗначенийСПлохойКолонкой(НоваяТаблица) Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Ожидаемые = Новый Структура;
	Ожидаемые.Вставить("Имя", "1");
	Ожидаемые.Вставить("Тип", Новый ОписаниеТипов("Строка"));
	Ожидаемые.Вставить("Заголовок", "Тест");
	
	Если НоваяТаблица Тогда
		Таблица = Новый ТаблицаЗначений();
		Таблица.Колонки.Добавить("К");
	Иначе
		Таблица = Неопределено;
	КонецЕсли;
	
	Результат = ТестируемыйМодуль.ТаблицаЗначенийСПлохойКолонкой(Ожидаемые.Имя, 
		Таблица, Ожидаемые.Тип, Ожидаемые.Заголовок);
	
	Если НоваяТаблица Тогда
		ЮТест.ОжидаетЧто(Результат.Колонки.Количество()).Равно(Таблица.Колонки.Количество());
	КонецЕсли;
	
	Колонка = Результат.Колонки[Ожидаемые.Имя];
	ЮТест.ОжидаетЧто(Колонка)
		.ИмеетТип("КолонкаТаблицыЗначений")
		.Свойство("ТипЗначения").Равно(Ожидаемые.Тип)
		.Свойство("Заголовок").Равно(Ожидаемые.Заголовок)
	;
	
КонецПроцедуры

#КонецОбласти

#Область ПустыеКолонкиТаблицыЗначений

Процедура Тест_ПустыеКолонкиТаблицыЗначений_ПустаяТаблицаБезКолонок() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Таблица = Новый ТаблицаЗначений;
	Результат = ТестируемыйМодуль.ПустыеКолонкиТаблицыЗначений(Таблица);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(0)
	;
	
КонецПроцедуры

Процедура Тест_ПустыеКолонкиТаблицыЗначений_БезКолонокИЕстьСтроки() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Добавить();
	Таблица.Добавить();
	
	Результат = ТестируемыйМодуль.ПустыеКолонкиТаблицыЗначений(Таблица);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(0)
	;
	
КонецПроцедуры

Процедура Тест_ПустыеКолонкиТаблицыЗначений_ПустаяТаблицаСКолонками() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Колонки = СтрРазделить("К1,К2,К3", ",");
	
	Таблица = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из Колонки Цикл
		Таблица.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Результат = ТестируемыйМодуль.ПустыеКолонкиТаблицыЗначений(Таблица);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.Равно(Колонки)
	;
	
КонецПроцедуры

Процедура Тест_ПустыеКолонкиТаблицыЗначений_ТаблицаСКолонкамиИСПустымиСтроками() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Колонки = СтрРазделить("К1,К2,К3", ",");
	
	Таблица = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из Колонки Цикл
		Таблица.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Таблица.Добавить();
	Таблица.Добавить();
	Таблица.Добавить();
	
	Результат = ТестируемыйМодуль.ПустыеКолонкиТаблицыЗначений(Таблица);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.Равно(Колонки)
	;
	
КонецПроцедуры

Процедура Тест_ПустыеКолонкиТаблицыЗначений_ТаблицаСоСтрокамиИБезПустыхКолонок() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("К1");
	Таблица.Колонки.Добавить("К2");
	Таблица.Колонки.Добавить("К3");
	
	Для НомерСтроки = 1 По 3 Цикл
		Строка = Таблица.Добавить();
		Строка.К1 = Новый УникальныйИдентификатор();
		Строка.К2 = Новый УникальныйИдентификатор();
		Строка.К3 = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	Результат = ТестируемыйМодуль.ПустыеКолонкиТаблицыЗначений(Таблица);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(0)
	;
	
КонецПроцедуры

Процедура Тест_ПустыеКолонкиТаблицыЗначений_ТаблицаСоСтрокамиИСПустойКолонкой() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("К1");
	Таблица.Колонки.Добавить("К2");
	Таблица.Колонки.Добавить("К3");
	
	Для НомерСтроки = 1 По 3 Цикл
		Строка = Таблица.Добавить();
		Строка.К1 = Новый УникальныйИдентификатор();
		Строка.К2 = Неопределено; //Пустая колонка
		Строка.К3 = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	Результат = ТестируемыйМодуль.ПустыеКолонкиТаблицыЗначений(Таблица);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(1)
		.Элемент(0)
			.Равно("К2")
	;
	
КонецПроцедуры

Процедура Тест_ПустыеКолонкиТаблицыЗначений_ТаблицаСоСтрокамиИСПочтиПустойКолонкой() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("К1");
	
	Таблица.Добавить().К1 = Новый УникальныйИдентификатор();
	Таблица.Добавить().К1 = Неопределено;
	
	Результат = ТестируемыйМодуль.ПустыеКолонкиТаблицыЗначений(Таблица);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(0)
	;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьТаблицуЗначенийИзСтроки

Процедура Тест_ЗаполнитьТаблицуЗначенийИзСтроки() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Строка = 
	"К1 | К2 | К3
	|А  | 1  | 16.02.2024 00:00:00
	|Б  | 2  | 17.02.2024 00:00:00
	|   |    |";
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("К2", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("К3", Новый ОписаниеТипов("Дата"));
	
	ТестируемыйМодуль.ЗаполнитьТаблицуЗначенийИзСтроки(Строка, Таблица, Истина);
	
	ЮТест.ОжидаетЧто(Таблица)
		.Свойство("[0].К1").Равно("А")
		.Свойство("[0].К2").Равно(1)
		.Свойство("[0].К3").Равно('2024 02 16')
		.Свойство("[1].К1").Равно("Б")
		.Свойство("[1].К2").Равно(2)
		.Свойство("[1].К3").Равно('2024 02 17')
		.Свойство("[2].К1").Равно("")
		.Свойство("[2].К2").Равно(0)
		.Свойство("[2].К3").Равно('0001 01 01')
	;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузитьКолонку

Процедура Тест_ВыгрузитьКолонку() Экспорт

		Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Макет = 
	" К1 | К2 |
	| 1  | 1  |
	| 1  | 3  |
	| 1  | 2  |
	| 1  | 4  |
	| 1  | 3  |
	|";
    Таблица = ТестируемыйМодуль.ТаблицаЗначенийИзСтроки(Макет);
	
	Результат = ТестируемыйМодуль.ВыгрузитьКолонку(Таблица, "К1", Ложь, Ложь);
	Ожидание = Таблица.ВыгрузитьКолонку("К1");
	ЮТест.ОжидаетЧто(Результат, "Выгрузка колонки одинаковых значений без сворачивания").Равно(Ожидание);
	
	Результат = ТестируемыйМодуль.ВыгрузитьКолонку(Таблица, "К1", Истина, Ложь);
	Ожидание = СтрРазделить("1", ",");
	ЮТест.ОжидаетЧто(Результат, "Выгрузка колонки одинаковых значений со свёрткой").Равно(Ожидание);
	
	Результат = ТестируемыйМодуль.ВыгрузитьКолонку(Таблица, "К2", Истина, Ложь);
	Ожидание = СтрРазделить("1,3,2,4", ",");
	ЮТест.ОжидаетЧто(Результат, "Выгрузка колонки значений со свёрткой").Равно(Ожидание);
	
	Результат = ТестируемыйМодуль.ВыгрузитьКолонку(Таблица, "К2", Истина, Истина);
	Ожидание = СтрРазделить("1,2,3,4", ",");
	ЮТест.ОжидаетЧто(Результат, "Выгрузка колонки значений со свёрткой и сортировкой").Равно(Ожидание);
	
КонецПроцедуры

#КонецОбласти

#Область ИменаКолонокТаблицы

Процедура Тест_ИменаКолонокТаблицы(ИменаКолонок) Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Таблица = Новый ТаблицаЗначений();
	МассивИмен = СтрРазделить(ИменаКолонок, ",", Ложь);
	Для Каждого ИмяКолонки Из МассивИмен Цикл
		Таблица.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Результат = ТестируемыйМодуль.ИменаКолонокТаблицы(Таблица);
	ЮТест.ОжидаетЧто(Результат).Равно(МассивИмен);
	
КонецПроцедуры

#КонецОбласти

#Область НовыйСписокЗначений

Процедура Тест_НовыйСписокЗначений_СписокЗначений() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	Параметр  = Новый СписокЗначений;
	Результат = ТестируемыйМодуль.НовыйСписокЗначений(Параметр);
	ЮТест.ОжидаетЧто(Параметр = Результат).ЭтоИстина();
	
КонецПроцедуры

Процедура Тест_НовыйСписокЗначений_Массив() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Параметр  = СтрРазделить("Э1,Э2,Э3", ",");
	
	Результат = ТестируемыйМодуль.НовыйСписокЗначений(Параметр);
	
	ОжидаемыйРезультат = Новый СписокЗначений;
	ОжидаемыйРезультат.ЗагрузитьЗначения(Параметр);
	
	ЮТест.ОжидаетЧто(Результат).Равно(ОжидаемыйРезультат);
	
	Параметр  = Новый ФиксированныйМассив(Параметр);
	
	Результат = ТестируемыйМодуль.НовыйСписокЗначений(Параметр);
	ЮТест.ОжидаетЧто(Результат).Равно(ОжидаемыйРезультат);
	
КонецПроцедуры


Процедура Тест_НовыйСписокЗначений_Произвольный() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Параметр  = Новый УникальныйИдентификатор();
	Результат = ТестируемыйМодуль.НовыйСписокЗначений(Параметр);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("СписокЗначений")
		.Свойство("[0].Значение")
			.Равно(Параметр);
	
КонецПроцедуры

#КонецОбласти

#Область ТипизироватьКолонки

Процедура Тест_ТипизироватьКолонки() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ТаблицаЗначений.Колонки.Добавить("НеизменяемаяКолонка", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("ТипизируемаяКолонка");
	
	ТаблицаЗначений.Добавить().ТипизируемаяКолонка = 1;
	ТаблицаЗначений.Добавить().ТипизируемаяКолонка = ТекущаяДатаСеанса();
	
	ОжидаемыйТипКолонки = Новый ОписаниеТипов("Число,Дата");
	
	ТестируемыйМодуль.ТипизироватьКолонки(ТаблицаЗначений);
	ЮТест.ОжидаетЧто(ТаблицаЗначений.Колонки.ТипизируемаяКолонка.ТипЗначения)
		.Равно(ОжидаемыйТипКолонки);
	
КонецПроцедуры

#КонецОбласти

#Область ИзменитьТипКолонки

Процедура Тест_ИзменитьТипКолонки() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ТаблицаЗначений.Колонки.Добавить("Колонка", Новый ОписаниеТипов("Строка"));
	
	ТаблицаЗначений.Добавить().Колонка = "1";
	ТаблицаЗначений.Добавить().Колонка = "123,1";
	ТаблицаЗначений.Добавить().Колонка = "тест";
	
	ОжидаемыйТип = Новый ОписаниеТипов("Число");
	ТестируемыйМодуль.ИзменитьТипКолонки(ТаблицаЗначений, "Колонка", ОжидаемыйТип);
	
	ЮТест.ОжидаетЧто(ТаблицаЗначений)
		.Свойство("Колонки.Колонка.ТипЗначения")
			.Равно(ОжидаемыйТип)
		.Свойство("[0].Колонка")
			.Равно(1)
		.Свойство("[1].Колонка")
			.Равно(123.1)
		.Свойство("[2].Колонка")
			.Равно(0)
	;
		
КонецПроцедуры

#КонецОбласти

#Область ОбъединитьТаблицыЗначений

Процедура Тест_ОбъединитьТаблицыЗначений() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	Таблица1 = Новый ТаблицаЗначений;
	Таблица1.Колонки.Добавить("К1", Новый ОписаниеТипов("Число"));
	Таблица1.Колонки.Добавить("К2", Новый ОписаниеТипов("Строка"));
	
	Строка1 = Таблица1.Добавить();
	Строка1.К1 = 1;
	Строка1.К2 = "Тест";
	
	Строка2 = Таблица1.Добавить();
	Строка2.К1 = 2;
	Строка2.К2 = "тыц";
	
	Таблица2 = Новый ТаблицаЗначений;
	Таблица2.Колонки.Добавить("К2", Новый ОписаниеТипов("Строка"));
	Таблица2.Колонки.Добавить("К3", Новый ОписаниеТипов("Дата"));
	
	Строка3 = Таблица2.Добавить();
	Строка3.К2 = "туц";
	Строка3.К3 = '20220220';
	
	Таблицы = Новый Массив;
	Таблицы.Добавить(Таблица1);
	Таблицы.Добавить(Таблица2);
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Результат = ТестируемыйМодуль.ОбъединитьТаблицыЗначений(Таблицы);
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("ТаблицаЗначений").ИмеетДлину(3)
		.Свойство("[0].К1").Равно(Строка1.К1)
		.Свойство("[0].К2").Равно(Строка1.К2)
		.Свойство("[0].К3").Равно('0001 01 01')
		.Свойство("[1].К1").Равно(Строка2.К1)
		.Свойство("[1].К2").Равно(Строка2.К2)
		.Свойство("[1].К3").Равно('0001 01 01')
		.Свойство("[2].К1").Равно(0)
		.Свойство("[2].К2").Равно(Строка3.К2)
		.Свойство("[2].К3").Равно(Строка3.К3)
		
КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьТаблицуИзДереваРекурсивно

Процедура Тест_ЗаполнитьТаблицуИзДереваРекурсивно() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("К1", Новый ОписаниеТипов("Число"));
	Дерево.Колонки.Добавить("К2", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Строка1 = Дерево.Строки.Добавить();
	Строка1.К1 = 111;
	Строка1.К2 = Новый УникальныйИдентификатор();
	
	Строка2 = Дерево.Строки.Добавить();
	Строка2.К1 = 222;
	Строка2.К2 = Новый УникальныйИдентификатор();
	
	Строка3 = Строка2.Строки.Добавить();
	Строка3.К1 = 333;
	Строка3.К2 = Новый УникальныйИдентификатор();
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТаблицаРезультат = Новый ТаблицаЗначений();
	ТаблицаРезультат.Колонки.Добавить("К1", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("К2", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ТестируемыйМодуль.ЗаполнитьТаблицуИзДереваРекурсивно(ТаблицаРезультат, Дерево);
	
	ЮТест.ОжидаетЧто(ТаблицаРезультат)
		.ИмеетТип("ТаблицаЗначений").ИмеетДлину(3)
		.Свойство("[0].К1").Равно(Строка1.К1)
		.Свойство("[0].К2").Равно(Строка1.К2)
		.Свойство("[1].К1").Равно(Строка2.К1)
		.Свойство("[1].К2").Равно(Строка2.К2)
		.Свойство("[2].К1").Равно(Строка3.К1)
		.Свойство("[2].К2").Равно(Строка3.К2)
		
КонецПроцедуры

#КонецОбласти

#Область ЗаменитьСсылкиНаНавигационные

Процедура Тест_ЗаменитьСсылкиНаНавигационные(ИмяТипа) Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ТестовыеДанные = ЗаменитьСсылкиНаНавигационные_ТестовыйДанные(ИмяТипа);
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	ТестируемыйМодуль.ЗаменитьСсылкиНаНавигационные(ТестовыеДанные.Параметр);
	
	ЮТест.ОжидаетЧто(ТестовыеДанные.Параметр).Равно(ТестовыеДанные.Ожидание);
	
КонецПроцедуры

#КонецОбласти

#Область КопияМассива

Процедура Тест_КопияМассива(ВходящийМассив, НачальныйЭлемент, ЧислоЭлементов, ОжидаемыйМассив, Описание) Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	ВходящийМассив = СтрРазделить(ВходящийМассив, ",");
	ОжидаемыйМассив = СтрРазделить(ОжидаемыйМассив, ",");
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Результат = ТестируемыйМодуль.КопияМассиваНаполнением(ВходящийМассив, НачальныйЭлемент, ЧислоЭлементов);
	ЮТест.ОжидаетЧто(Результат, "КопияМассиваНаполнением() - " + Описание).Равно(ОжидаемыйМассив);
	
	Результат = ТестируемыйМодуль.КопияМассиваУдалениемЛишних(ВходящийМассив, НачальныйЭлемент, ЧислоЭлементов);
	ЮТест.ОжидаетЧто(Результат, "КопияМассиваУдалениемЛишних() - " + Описание).Равно(ОжидаемыйМассив);
	
	Результат = ТестируемыйМодуль.КопияМассива(ВходящийМассив, НачальныйЭлемент, ЧислоЭлементов, 1);
	ЮТест.ОжидаетЧто(Результат, "КопияМассива() с методом 1 - " + Описание).Равно(ОжидаемыйМассив);
	
	Результат = ТестируемыйМодуль.КопияМассива(ВходящийМассив, НачальныйЭлемент, ЧислоЭлементов, 2);
	ЮТест.ОжидаетЧто(Результат, "КопияМассива() с методом 2 - " + Описание).Равно(ОжидаемыйМассив);
	
	Результат = ТестируемыйМодуль.КопияМассива(ВходящийМассив, НачальныйЭлемент, ЧислоЭлементов);
	ЮТест.ОжидаетЧто(Результат, "КопияМассива() с автоопределением метода - " + Описание).Равно(ОжидаемыйМассив);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТестовыеДанные

#Область ЗаменитьСсылкиНаНавигационные

Функция ЗаменитьСсылкиНаНавигационные_ТестовыйДанные(ИмяТипа)
	
	Если ИмяТипа = "Рекурсивно" Тогда
		Возврат ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Рекурсивно();
	ИначеЕсли ИмяТипа = "Массив" Тогда
		Возврат ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Массив();
	Иначе
		Возврат ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_СтруктураИлиСоответствие(ИмяТипа);
	КонецЕсли;
	
КонецФункции

Функция ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Рекурсивно()
	
	Массив = ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Массив();
	Структура = ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Структура();
	Соответствие = ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Соответствие();
	
	//Соответствие загоняем в структуру
	Ключ = ЖЧТ_Общее.СлучайныйКлюч();
	Структура.Параметр.Вставить(Ключ, Соответствие.Параметр);
	Структура.Ожидание.Вставить(Ключ, Соответствие.Ожидание);
	
	//Структуру помещаем в массив
	Массив.Параметр.Добавить(Структура.Параметр);
	Массив.Ожидание.Добавить(Структура.Ожидание);
	
	Возврат Массив;
	
КонецФункции

Функция ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Массив()
	
	Длина = ЖЧТ_Общее.СлучайноеЧисло(5, 10);
	
	Параметр = Новый Массив(Длина);
	Ожидание = Новый Массив(Длина);
	
	Для Индекс = 0 По Длина - 1 Цикл
		
		Ссылка = ЖЧТ_Общее.ФейковаяСсылка("СправочникСсылка.ЖЧТ_ТестовыйСправочник");
		
		Параметр[Индекс] = Ссылка;
		Ожидание[Индекс] = ПолучитьНавигационнуюСсылку(Ссылка);
		
	КонецЦикла;
	
	Возврат Новый Структура("Параметр,Ожидание", Параметр, Ожидание);
	
КонецФункции

Функция ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Структура()
	
	Возврат ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_СтруктураИлиСоответствие("Структура");
	
КонецФункции

Функция ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_Соответствие()
	
	Возврат ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_СтруктураИлиСоответствие("Соответствие");
	
КонецФункции

Функция ЗаменитьСсылкиНаНавигационные_ТестовыйДанные_СтруктураИлиСоответствие(ИмяТипа)
	
	Длина = ЖЧТ_Общее.СлучайноеЧисло(5, 10);
	
	Параметр = Новый (ИмяТипа);
	Ожидание = Новый (ИмяТипа);
	
	Для Индекс = 1 По Длина Цикл
		
		Ссылка = ЖЧТ_Общее.ФейковаяСсылка("СправочникСсылка.ЖЧТ_ТестовыйСправочник");
		Ключ = ЖЧТ_Общее.СлучайныйКлюч();
		Параметр.Вставить(Ключ, Ссылка);
		Ожидание.Вставить(Ключ, ПолучитьНавигационнуюСсылку(Ссылка));
		
	КонецЦикла;
	
	Возврат Новый Структура("Параметр,Ожидание", Параметр, Ожидание);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Общее

// Тестируемый модуль.
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция ТестируемыйМодуль() Экспорт

	Возврат ЖЧТ_Модули.РаботаСКоллекциями();
	
КонецФункции

#КонецОбласти

#КонецОбласти
