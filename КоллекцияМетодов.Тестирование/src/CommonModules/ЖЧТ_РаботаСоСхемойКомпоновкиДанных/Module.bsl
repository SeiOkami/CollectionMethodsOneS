
#Область СлужебныйПрограммныйИнтерфейс

// Регистрация тестов
Процедура ИсполняемыеСценарии() Экспорт

	Перем ЮТТесты;
	ЮТТесты = ЖЧТ_Движок.ЮТТесты();
	
	ЮТТесты
		.ДобавитьТестовыйНабор("УстановитьКоличествоПолучаемыхЗаписейНабораДанных")
			.ДобавитьТест("Тест_УстановитьКоличествоПолучаемыхЗаписейНабораДанных_Успешно")
		.ДобавитьТестовыйНабор("НовыйКомпоновщикНастроек")
			.ДобавитьТест("Тест_НовыйКомпоновщикНастроек")
		.ДобавитьТестовыйНабор("ПолеКомпоновкиДанных")
			.ДобавитьТест("Тест_ПолеКомпоновкиДанных")
				.СПараметрами("Тест.Овое.Поле")
				.СПараметрами(Новый ПолеКомпоновкиДанных("Тест.Овое.Поле"))
				.СПараметрами(ЖЧТ_Модули.РаботаСТипами().НовыйОбъект("ПользовательскоеПолеВыборКомпоновкиДанных"))
				.СПараметрами(ЖЧТ_Модули.РаботаСТипами().НовыйОбъект("ПользовательскоеПолеВыражениеКомпоновкиДанных"))
		.ДобавитьТестовыйНабор("НовыйСКД")
			.ДобавитьТест("Тест_НовыйСКД")
		.ДобавитьТестовыйНабор("ДобавитьНаборДанныхОбъект")
			.ДобавитьТест("Тест_ДобавитьНаборДанныхОбъект")
		.ДобавитьТестовыйНабор("ДобавитьНаборДанныхЗапрос")
			.ДобавитьТест("Тест_ДобавитьНаборДанныхЗапрос")
		.ДобавитьТестовыйНабор("ДобавитьПолеНабораДанных")
			.ДобавитьТест("Тест_ДобавитьПолеНабораДанных")
		.ДобавитьТестовыйНабор("НайтиНаборДанных")
			.ДобавитьТест("Тест_НайтиНаборДанных")
		.ДобавитьТестовыйНабор("ПараметрыДанныхСтруктурой")
			.ДобавитьТест("Тест_ПараметрыДанныхСтруктурой_СхемаСНеобязательнымПараметромБезНастроек"
				, "СКД с НЕеобязательным параметром и без настроек")
			.ДобавитьТест("Тест_ПараметрыДанныхСтруктурой_СхемаСНеобязательнымПараметромИОтключеннымВНастройках"
				, "СКД с НЕеобязательным параметром и отключенным параметром в настройках")
			.ДобавитьТест("Тест_ПараметрыДанныхСтруктурой_СхемаСНеобязательнымПараметромИВключеннойНастройкой"
				, "СКД с НЕеобязательным параметром и включенным параметром в настройках")
			.ДобавитьТест("Тест_ПараметрыДанныхСтруктурой_СхемаСОбязательнымПараметромИБезНастроек"
				, "СКД с обязательным параметром и без настроек")
			.ДобавитьТест("Тест_ПараметрыДанныхСтруктурой_СхемаСОбязательнымПараметромИОтключеннойНастройкой"
				, "СКД с обязательным параметром и отключенным параметром в настройках")
			.ДобавитьТест("Тест_ПараметрыДанныхСтруктурой_СхемаСОбязательнымПараметромИВключеннойНастройкой"
				, "СКД с обязательным параметром и включенным параметром в настройках")
		.ДобавитьТестовыйНабор("УдалитьНедоступныеОтборы")
			.ДобавитьТест("Тест_УдалитьНедоступныеОтборы")
		.ДобавитьТестовыйНабор("ВывестиВсеДоступныеПоляВыбора")
			.ДобавитьТест("Тест_ВывестиВсеДоступныеПоляВыбора")
		.ДобавитьТестовыйНабор("ТаблицаИзНабораДанных")
			.ДобавитьТест("Тест_ТаблицаИзНабораДанных")
		.ДобавитьТестовыйНабор("СхемаКомпоновкиДанныхИзЗапроса")
			.ДобавитьТест("Тест_СхемаКомпоновкиДанныхИзЗапроса")
			.ДобавитьТест("Тест_СхемаКомпоновкиДанныхИзЗапроса_НеобязательныйПараметр")
	;

КонецПроцедуры

#Область Тесты

#Область УстановитьКоличествоПолучаемыхЗаписейНабораДанных

Процедура Тест_УстановитьКоличествоПолучаемыхЗаписейНабораДанных_Успешно() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	СКД = Новый СхемаКомпоновкиДанных();
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ 1 КАК Поле ПОМЕСТИТЬ ВТ; ВЫБРАТЬ Поле ИЗ ВТ";
	
	ОжидаемыйТекст = ЖЧТ_Модули.РаботаСЗапросами().ОтформатированныйТекстЗапроса(
		"ВЫБРАТЬ 1 КАК Поле ПОМЕСТИТЬ ВТ; ВЫБРАТЬ ПЕРВЫЕ 9 Поле ИЗ ВТ");
	
	ТестируемыйМодуль.УстановитьКоличествоПолучаемыхЗаписейНабораДанных(НаборДанных, 9);
	
	ЮТест.ОжидаетЧто(НаборДанных.Запрос).Равно(ОжидаемыйТекст);
	
КонецПроцедуры

#КонецОбласти

#Область НовыйКомпоновщикНастроек

Процедура Тест_НовыйКомпоновщикНастроек() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	СКД = Новый СхемаКомпоновкиДанных();
	Параметр = СКД.Параметры.Добавить();
	Параметр.Имя = "Тест";
	
	КомпоновщикНастроек = ТестируемыйМодуль.НовыйКомпоновщикНастроек(СКД); // КомпоновщикНастроекКомпоновкиДанных
	
	ЮТест.ОжидаетЧто(КомпоновщикНастроек)
		.ИмеетТип("КомпоновщикНастроекКомпоновкиДанных")
		.Свойство("Настройки.ДоступныеПоляВыбора.Элементы[1].Элементы[0].Поле")
		.Равно(Новый ПолеКомпоновкиДанных("ПараметрыДанных.Тест"));
	
	
КонецПроцедуры

#КонецОбласти

#Область ПолеКомпоновкиДанных

Процедура Тест_ПолеКомпоновкиДанных(Источник, Знач ПутьКДанным = Неопределено) Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Строка(Источник);
	КонецЕсли;
	
	Ожидание  = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	
	Результат = ТестируемыйМодуль.ПолеКомпоновкиДанных(Источник);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("ПолеКомпоновкиДанных")
		.Равно(Ожидание);
	
КонецПроцедуры

#КонецОбласти

#Область НовыйСКД

Процедура Тест_НовыйСКД() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	Результат = ТестируемыйМодуль.НовыйСКД();
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("СхемаКомпоновкиДанных")
		.Свойство("ИсточникиДанных[0].ТипИсточникаДанных").Равно("Local");
	
КонецПроцедуры

#КонецОбласти

#Область ДобавитьНаборДанныхОбъект

Процедура Тест_ДобавитьНаборДанныхОбъект() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	СКД = ТестируемыйМодуль.НовыйСКД();
	
	ИмяНабора  = "ТестовыйНабор";
	ИмяОбъекта = "ТестовыйОбъект";
	Результат  = ТестируемыйМодуль.ДобавитьНаборДанныхОбъект(СКД, ИмяНабора, ИмяОбъекта);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("НаборДанныхОбъектСхемыКомпоновкиДанных")
		.Свойство("Имя").Равно(ИмяНабора)
		.Свойство("ИмяОбъекта").Равно(ИмяОбъекта)
		.Свойство("ИсточникДанных").Равно(СКД.ИсточникиДанных.Получить(0).Имя)
	;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавитьНаборДанныхЗапрос

Процедура Тест_ДобавитьНаборДанныхЗапрос() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	СКД = ТестируемыйМодуль.НовыйСКД();
	
	ИмяНабора  = "ТестовыйНабор";
	ТекстЗапроса = "ВЫБРАТЬ 1 КАК Поле";
	Результат  = ТестируемыйМодуль.ДобавитьНаборДанныхЗапрос(СКД, ИмяНабора, ТекстЗапроса);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("НаборДанныхЗапросСхемыКомпоновкиДанных")
		.Свойство("Имя").Равно(ИмяНабора)
		.Свойство("Запрос").Равно(ТекстЗапроса)
		.Свойство("ИсточникДанных").Равно(СКД.ИсточникиДанных.Получить(0).Имя)
	;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавитьПолеНабораДанных

Процедура Тест_ДобавитьПолеНабораДанных() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	СКД = ТестируемыйМодуль.НовыйСКД();
	НаборСКД = ТестируемыйМодуль.ДобавитьНаборДанныхОбъект(СКД, "ИмяНабора");
	
	ИмяПоля = "ТестовоеПоле";
	Заголовок = "Тестовый заголовок";
	ПутьКДанным = "Папка.ТестовоеПоле";
	ТипЗначения = Новый ОписаниеТипов("Строка,Число");
	Результат = ТестируемыйМодуль.ДобавитьПолеНабораДанных(НаборСКД, ИмяПоля, Заголовок, ПутьКДанным, ТипЗначения);
	
	ЮТест.ОжидаетЧто(Результат)
		.ИмеетТип("ПолеНабораДанныхСхемыКомпоновкиДанных")
		.Свойство("Поле").Равно(ИмяПоля)
		.Свойство("ПутьКДанным").Равно(ПутьКДанным)
		.Свойство("ТипЗначения").Равно(ТипЗначения)
	;
	
КонецПроцедуры

#КонецОбласти

#Область НайтиНаборДанных

Процедура Тест_НайтиНаборДанных() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	СКД = ТестируемыйМодуль.НовыйСКД(); // СхемаКомпоновкиДанных
	Объединение = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"));
	Объединение.Имя = "Объединение";
	
	ИмяНабора = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	НаборДанных = Объединение.Элементы.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабора;
	
	//Передаем СКД
	Результат = ТестируемыйМодуль.НайтиНаборДанных(СКД, ИмяНабора);
	ЮТест.ОжидаетЧто(Результат).Равно(НаборДанных);
	
	//Передаем коллекцию наборов СКД
	Результат = ТестируемыйМодуль.НайтиНаборДанных(СКД.НаборыДанных, ИмяНабора);
	ЮТест.ОжидаетЧто(Результат).Равно(НаборДанных);
	
	//Передаем объединение
	Результат = ТестируемыйМодуль.НайтиНаборДанных(Объединение, ИмяНабора);
	ЮТест.ОжидаетЧто(Результат).Равно(НаборДанных);
	
	//Передаем коллекцию наборов объединения
	Результат = ТестируемыйМодуль.НайтиНаборДанных(Объединение.Элементы, ИмяНабора);
	ЮТест.ОжидаетЧто(Результат).Равно(НаборДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыДанныхСтруктурой

Процедура Тест_ПараметрыДанныхСтруктурой_СхемаСНеобязательнымПараметромБезНастроек() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	ТестовыеДанные = ТестовыеДанные_ПараметрыДанныхСтруктурой();
	ТестовыеДанные.ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
	
	Результат = ТестируемыйМодуль.ПараметрыДанныхСтруктурой(ТестовыеДанные.СКД, Новый НастройкиКомпоновкиДанных());
	ЮТест.ОжидаетЧто(Результат).ИмеетДлину(0);
	
КонецПроцедуры

Процедура Тест_ПараметрыДанныхСтруктурой_СхемаСНеобязательнымПараметромИОтключеннымВНастройках() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТестовыеДанные = ТестовыеДанные_ПараметрыДанныхСтруктурой();
	ТестовыеДанные.ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
	ТестовыеДанные.ПараметрНастроек.Использование = Ложь;
	
	Результат = ТестируемыйМодуль.ПараметрыДанныхСтруктурой(ТестовыеДанные.СКД, ТестовыеДанные.НастройкиКомпоновки);
	ЮТест.ОжидаетЧто(Результат).ИмеетДлину(0);
	
КонецПроцедуры

Процедура Тест_ПараметрыДанныхСтруктурой_СхемаСНеобязательнымПараметромИВключеннойНастройкой() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТестовыеДанные = ТестовыеДанные_ПараметрыДанныхСтруктурой();
	ТестовыеДанные.ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
	ТестовыеДанные.ПараметрНастроек.Использование = Истина;
	
	Результат = ТестируемыйМодуль.ПараметрыДанныхСтруктурой(ТестовыеДанные.СКД, ТестовыеДанные.НастройкиКомпоновки);
	ЮТест.ОжидаетЧто(Результат)
			.ИмеетДлину(1)
		.Свойство(ТестовыеДанные.ПараметрСКД.Имя)
			.Равно(ТестовыеДанные.ПараметрНастроек.Значение);
	
КонецПроцедуры

Процедура Тест_ПараметрыДанныхСтруктурой_СхемаСОбязательнымПараметромИБезНастроек() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТестовыеДанные = ТестовыеДанные_ПараметрыДанныхСтруктурой();
	ТестовыеДанные.ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ТестовыеДанные.ПараметрНастроек.Использование = Ложь;
	
	Результат = ТестируемыйМодуль.ПараметрыДанныхСтруктурой(ТестовыеДанные.СКД, Новый НастройкиКомпоновкиДанных());
	ЮТест.ОжидаетЧто(Результат)
			.ИмеетДлину(1)
		.Свойство(ТестовыеДанные.ПараметрСКД.Имя)
			.Равно(ТестовыеДанные.ПараметрСКД.Значение);
	
КонецПроцедуры

Процедура Тест_ПараметрыДанныхСтруктурой_СхемаСОбязательнымПараметромИОтключеннойНастройкой() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТестовыеДанные = ТестовыеДанные_ПараметрыДанныхСтруктурой();
	ТестовыеДанные.ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ТестовыеДанные.ПараметрНастроек.Использование = Ложь;
	
	Результат = ТестируемыйМодуль.ПараметрыДанныхСтруктурой(ТестовыеДанные.СКД, ТестовыеДанные.НастройкиКомпоновки);
	ЮТест.ОжидаетЧто(Результат)
			.ИмеетДлину(1)
		.Свойство(ТестовыеДанные.ПараметрСКД.Имя)
			.Равно(ТестовыеДанные.ПараметрСКД.Значение);
	
КонецПроцедуры

Процедура Тест_ПараметрыДанныхСтруктурой_СхемаСОбязательнымПараметромИВключеннойНастройкой() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТестовыеДанные = ТестовыеДанные_ПараметрыДанныхСтруктурой();
	ТестовыеДанные.ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ТестовыеДанные.ПараметрНастроек.Использование = Истина;
	
	Результат = ТестируемыйМодуль.ПараметрыДанныхСтруктурой(ТестовыеДанные.СКД, ТестовыеДанные.НастройкиКомпоновки);
	ЮТест.ОжидаетЧто(Результат)
			.ИмеетДлину(1)
		.Свойство(ТестовыеДанные.ПараметрСКД.Имя)
			.Равно(ТестовыеДанные.ПараметрНастроек.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область УдалитьНедоступныеОтборы

Процедура Тест_УдалитьНедоступныеОтборы() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	0 КАК Число,
	|	"" "" КАК Строка,
	|	0 КАК ЗапрещенноеДляОтборов
	|{ГДЕ
	|	0 КАК Число,
	|	"" "" КАК Строка
	|}";
	
	СКД = ТестируемыйМодуль.НовыйСКД();
	НаборДанных = ТестируемыйМодуль.ДобавитьНаборДанныхЗапрос(СКД, "Запрос", ТекстЗапроса); // НаборДанныхЗапросСхемыКомпоновкиДанных
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	
	КомпоновщикНастроек = ТестируемыйМодуль.НовыйКомпоновщикНастроек(СКД); // КомпоновщикНастроекКомпоновкиДанных
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	//Элементы отбора, которые останутся после выполнения метода
	ПравильныеЭлементы = Новый Массив; // Массив из ЭлементОтбораКомпоновкиДанных
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Число");
	ПравильныеЭлементы.Добавить(ЭлементОтбора);
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Строка");
	ПравильныеЭлементы.Добавить(ЭлементОтбора);
	
	//Недоступные элементы отбора, которые должны быть удалены
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапрещенноеДляОтборов");
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НесуществующееПоле");
	
	ТестируемыйМодуль.УдалитьНедоступныеОтборы(ЭлементыОтбора, КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора);
	
	ЮТест.ОжидаетЧто(ЭлементыОтбора.Количество()).Равно(ПравильныеЭлементы.Количество());
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		НайденПравильныйЭлемент = ПравильныеЭлементы.Найти(ЭлементОтбора) <> Неопределено;
		ЮТест.ОжидаетЧто(НайденПравильныйЭлемент, 
			"Найден элемент отбор: " + ЭлементОтбора.ЛевоеЗначение).ЭтоИстина();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВывестиВсеДоступныеПоляВыбора

Процедура Тест_ВывестиВсеДоступныеПоляВыбора() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	0 КАК Число,
	|	"" "" КАК Строка,
	|	0 КАК Запрещенное
	|{ВЫБРАТЬ
	|	Число,
	|	Строка
	|}";
	
	СКД = ТестируемыйМодуль.НовыйСКД();
	НаборДанных = ТестируемыйМодуль.ДобавитьНаборДанныхЗапрос(СКД, "Запрос", ТекстЗапроса); // НаборДанныхЗапросСхемыКомпоновкиДанных
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	
	КомпоновщикНастроек = ТестируемыйМодуль.НовыйКомпоновщикНастроек(СКД); // КомпоновщикНастроекКомпоновкиДанных
	ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
	ТестируемыйМодуль.ВывестиВсеДоступныеПоляВыбора(ВыбранныеПоля);
	
	ОжидаемыйРезультат = СтрРазделить("Число,Строка,СистемныеПоля", ",");
	ЮТест.ОжидаетЧто(ВыбранныеПоля.Элементы.Количество()).Равно(ОжидаемыйРезультат.Количество());
	
	Для Каждого ВыбранноеПоле Из ВыбранныеПоля.Элементы Цикл
		ЮТест.ОжидаетЧто(ОжидаемыйРезультат).Содержит(Строка(ВыбранноеПоле.Поле));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаИзНабораДанных

Процедура Тест_ТаблицаИзНабораДанных() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	СКД = ТестируемыйМодуль.НовыйСКД();
	НаборДанных = ТестируемыйМодуль.ДобавитьНаборДанныхОбъект(СКД, "Объект"); // НаборДанныхОбъектСхемыКомпоновкиДанных
	
	ПроверяемыеПоля = Новый Массив; // Массив из ПолеНабораДанныхСхемыКомпоновкиДанных
	
	ПроверяемыеПоля.Добавить(
		ТестируемыйМодуль.ДобавитьПолеНабораДанных(НаборДанных, ЖЧТ_Общее.СлучайныйКлюч(), 
			ЖЧТ_Общее.СлучайныйКлюч(), , Новый ОписаниеТипов("Строка")));
	
	ПроверяемыеПоля.Добавить(
		ТестируемыйМодуль.ДобавитьПолеНабораДанных(НаборДанных, ЖЧТ_Общее.СлучайныйКлюч(), 
			ЖЧТ_Общее.СлучайныйКлюч(), , Новый ОписаниеТипов("Число")));
	
	Результат = ТестируемыйМодуль.ТаблицаИзНабораДанных(НаборДанных); // ТаблицаЗначений
	
	ЮТест.ОжидаетЧто(Результат.Колонки.Количество()).Равно(ПроверяемыеПоля.Количество());
	
	Для Каждого Поле Из ПроверяемыеПоля Цикл
		
		ЮТест.ОжидаетЧто(Результат.Колонки[Поле.Поле])
			.Свойство("Имя").Равно(Поле.Поле)
			.Свойство("ТипЗначения").Равно(Поле.ТипЗначения)
			.Свойство("Заголовок").Равно(Поле.Заголовок)
			;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СхемаКомпоновкиДанныхИзЗапроса

Процедура Тест_СхемаКомпоновкиДанныхИзЗапроса() Экспорт

	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТекстЗапроса = "ВЫБРАТЬ 1 КАК Число ГДЕ 1 = &Параметр";
	ПараметрыЗапроса = Новый Структура("Параметр", 1);
	
	СхемаКомпоновкиДанных = ТестируемыйМодуль().СхемаКомпоновкиДанныхИзЗапроса(ТекстЗапроса, ПараметрыЗапроса); //СхемаКомпоновкиДанных
	
	//Проверяем источники и наборы данных
	ЮТест.ОжидаетЧто(СхемаКомпоновкиДанных).ИмеетТип("СхемаКомпоновкиДанных");
	ЮТест.ОжидаетЧто(СхемаКомпоновкиДанных.ИсточникиДанных).ИмеетДлину(1);
	ЮТест.ОжидаетЧто(СхемаКомпоновкиДанных.НаборыДанных).ИмеетДлину(1);
	
	//Проверяем текст запроса
	ЮТест.ОжидаетЧто(СхемаКомпоновкиДанных.НаборыДанных[0])
		.Свойство("Запрос").Равно(ТекстЗапроса);
		
	//Проверяем выбранные элементы
	ЮТест.ОжидаетЧто(СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Выбор.Элементы)
		.ИмеетДлину(1)
		.Свойство("[0].Поле").Равно(Новый ПолеКомпоновкиДанных("Число"));
	
	//Проверяем параметры
	ЮТест.ОжидаетЧто(СхемаКомпоновкиДанных.Параметры).ИмеетДлину(1);
	ЮТест.ОжидаетЧто(СхемаКомпоновкиДанных.Параметры[0])
		.Свойство("Имя").Равно("Параметр")
		.Свойство("Значение").Равно(1);
	
	//Проверяем результат выполнения
	Тест_СхемаКомпоновкиДанныхИзЗапроса_Проверить(ТекстЗапроса, ПараметрыЗапроса, Истина,
		"Параметр с правильным значением");
	
	//Изменяем параметр, чтобы результат был 0
	ПараметрыЗапроса.Параметр = 0;
	Тест_СхемаКомпоновкиДанныхИзЗапроса_Проверить(ТекстЗапроса, ПараметрыЗапроса, Ложь,
		"Параметр с плохим значением");
	
КонецПроцедуры

Процедура Тест_СхемаКомпоновкиДанныхИзЗапроса_НеобязательныйПараметр() Экспорт
	
	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();

	ТестируемыйМодуль = ТестируемыйМодуль();
	
	ТекстЗапроса = "ВЫБРАТЬ 1 КАК Число {ГДЕ 1 = &Параметр}";
	ПараметрыЗапроса = Новый Структура();
	
	СхемаКомпоновкиДанных = ТестируемыйМодуль().СхемаКомпоновкиДанныхИзЗапроса(
		ТекстЗапроса, ПараметрыЗапроса); //СхемаКомпоновкиДанных
	
	ЮТест.ОжидаетЧто(СхемаКомпоновкиДанных.Параметры)
		.ИмеетДлину(1)
		.Свойство("[0].Имя").Равно("Параметр")
		.Свойство("[0].Значение").НеЗаполнено()
		.Свойство("[0].Использование").Равно(ИспользованиеПараметраКомпоновкиДанных.Авто);
	
	Тест_СхемаКомпоновкиДанныхИзЗапроса_Проверить(ТекстЗапроса, ПараметрыЗапроса, Истина,
		"Не передается необязательный параметр");
	
	ПараметрыЗапроса.Вставить("Параметр", 0);
	Тест_СхемаКомпоновкиДанныхИзЗапроса_Проверить(ТекстЗапроса, ПараметрыЗапроса, Ложь,
		"Необязательный параметр с плохим значением");
	
	ПараметрыЗапроса.Вставить("Параметр", 1);
	Тест_СхемаКомпоновкиДанныхИзЗапроса_Проверить(ТекстЗапроса, ПараметрыЗапроса, Истина,
		"Необязательный параметр с хорошим значением");
	
КонецПроцедуры

Процедура Тест_СхемаКомпоновкиДанныхИзЗапроса_Проверить(ТекстЗапроса, ПараметрыЗапроса, ЕстьДанные, ОписаниеКейса)
	
	Перем ЮТест;
	ЮТест = ЖЧТ_Движок.ЮТест();
	
	СхемаКомпоновкиДанных = ТестируемыйМодуль().СхемаКомпоновкиДанныхИзЗапроса(
		ТекстЗапроса, ПараметрыЗапроса); //СхемаКомпоновкиДанных
	
	РезультатСКД = Новый ТаблицаЗначений();
	СкомпоноватьРезультатОтчета(РезультатСКД, СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ЮТест.ОжидаетЧто(РезультатСКД.Колонки, ОписаниеКейса)
		.ИмеетДлину(1)
		.Свойство("[0].Имя").Равно("Число");
	
	Если ЕстьДанные Тогда
		ЮТест.ОжидаетЧто(РезультатСКД, ОписаниеКейса)
			.ИмеетДлину(1)
			.Свойство("[0].Число").Равно(1);
	Иначе
		ЮТест.ОжидаетЧто(РезультатСКД, ОписаниеКейса)
			.ИмеетДлину(0)
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТестовыеДанные

#Область ПараметрыДанныхСтруктурой

Функция ТестовыеДанные_ПараметрыДанныхСтруктурой()
	
	ТестируемыйМодуль = ТестируемыйМодуль();
	СКД = ТестируемыйМодуль.НовыйСКД(); // СхемаКомпоновкиДанных
	ПараметрСКД = СКД.Параметры.Добавить();
	ПараметрСКД.Имя = "_" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	ПараметрСКД.Значение = Новый УникальныйИдентификатор();
	
	КомпоновщикНастроек = ТестируемыйМодуль.НовыйКомпоновщикНастроек(СКД); // КомпоновщикНастроекКомпоновкиДанных
	ПараметрНастроек = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных(ПараметрСКД.Имя));
		
	ПараметрНастроек.Значение = Новый УникальныйИдентификатор();
	
	Результат = Новый Структура;
	Результат.Вставить("СКД", СКД);
	Результат.Вставить("ПараметрСКД", ПараметрСКД);
	Результат.Вставить("НастройкиКомпоновки", КомпоновщикНастроек.Настройки);
	Результат.Вставить("ПараметрНастроек", ПараметрНастроек);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Тестируемый модуль.
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция ТестируемыйМодуль() Экспорт

	Возврат ЖЧТ_Модули.РаботаСоСхемойКомпоновкиДанных();
	
КонецФункции

// Выполняет компоновку СКД по переданным настройкам
//
// Параметры:
//  Результат               - ТабличныйДокумент, ТаблицаЗначений -
//  СхемаКомпоновки         - СхемаКомпоновкиДанных, Строка - 
//  НастройкиКомпоновки     - НастройкиКомпоновкиДанных
//  ВнешниеНаборыДанных     - Структура, Неопределено -
//
Процедура СкомпоноватьРезультатОтчета(Результат, 
	Знач СхемаКомпоновки, Знач НастройкиКомпоновки, Знач ВнешниеНаборыДанных = Неопределено)
    
	//Определяем тип генератора
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		ВыводВКоллекциюЗначений = Истина;
		ТипГенератораВывода     = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	Иначе
		ВыводВКоллекциюЗначений = Ложь;
		ТипГенератораВывода     = Тип("ГенераторМакетаКомпоновкиДанных");
	КонецЕсли;
    
    ВременныйКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    ВременныйКомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
    ВременныйКомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
    ВременныйКомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
    
    НастройкиКомпоновки = ВременныйКомпоновщикНастроек.ПолучитьНастройки();
    
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновки, НастройкиКомпоновки,,, ТипГенератораВывода);
    
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
    
    //Выводим результат
	ПроцессорВывода = Неопределено;
    Если ВыводВКоллекциюЗначений Тогда
		ПроцессорВывода    = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
	Иначе
		ПроцессорВывода    = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
	КонецЕсли;
    
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

#КонецОбласти
